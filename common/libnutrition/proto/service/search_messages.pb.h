// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libnutrition/proto/service/search_messages.proto

#ifndef PROTOBUF_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto__INCLUDED
#define PROTOBUF_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "libnutrition/proto/service/error.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto();
void protobuf_AssignDesc_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto();
void protobuf_ShutdownFile_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto();

class SearchRequest;
class SearchResult;
class SearchResponse;

enum SearchResult_FoodType {
  SearchResult_FoodType_SingleFood = 0,
  SearchResult_FoodType_CompositeFood = 1,
  SearchResult_FoodType_Template = 2
};
bool SearchResult_FoodType_IsValid(int value);
const SearchResult_FoodType SearchResult_FoodType_FoodType_MIN = SearchResult_FoodType_SingleFood;
const SearchResult_FoodType SearchResult_FoodType_FoodType_MAX = SearchResult_FoodType_Template;
const int SearchResult_FoodType_FoodType_ARRAYSIZE = SearchResult_FoodType_FoodType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SearchResult_FoodType_descriptor();
inline const ::std::string& SearchResult_FoodType_Name(SearchResult_FoodType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SearchResult_FoodType_descriptor(), value);
}
inline bool SearchResult_FoodType_Parse(
    const ::std::string& name, SearchResult_FoodType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SearchResult_FoodType>(
    SearchResult_FoodType_descriptor(), name, value);
}
// ===================================================================

class SearchRequest : public ::google::protobuf::Message {
 public:
  SearchRequest();
  virtual ~SearchRequest();
  
  SearchRequest(const SearchRequest& from);
  
  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRequest& default_instance();
  
  void Swap(SearchRequest* other);
  
  // implements Message ----------------------------------------------
  
  SearchRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string searchTerms = 1;
  inline bool has_searchterms() const;
  inline void clear_searchterms();
  static const int kSearchTermsFieldNumber = 1;
  inline const ::std::string& searchterms() const;
  inline void set_searchterms(const ::std::string& value);
  inline void set_searchterms(const char* value);
  inline void set_searchterms(const char* value, size_t size);
  inline ::std::string* mutable_searchterms();
  
  // repeated string excludeGroupIds = 2;
  inline int excludegroupids_size() const;
  inline void clear_excludegroupids();
  static const int kExcludeGroupIdsFieldNumber = 2;
  inline const ::std::string& excludegroupids(int index) const;
  inline ::std::string* mutable_excludegroupids(int index);
  inline void set_excludegroupids(int index, const ::std::string& value);
  inline void set_excludegroupids(int index, const char* value);
  inline void set_excludegroupids(int index, const char* value, size_t size);
  inline ::std::string* add_excludegroupids();
  inline void add_excludegroupids(const ::std::string& value);
  inline void add_excludegroupids(const char* value);
  inline void add_excludegroupids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& excludegroupids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_excludegroupids();
  
  // optional bool searchSingleFoods = 3 [default = true];
  inline bool has_searchsinglefoods() const;
  inline void clear_searchsinglefoods();
  static const int kSearchSingleFoodsFieldNumber = 3;
  inline bool searchsinglefoods() const;
  inline void set_searchsinglefoods(bool value);
  
  // optional bool searchComposites = 4 [default = true];
  inline bool has_searchcomposites() const;
  inline void clear_searchcomposites();
  static const int kSearchCompositesFieldNumber = 4;
  inline bool searchcomposites() const;
  inline void set_searchcomposites(bool value);
  
  // optional bool searchTemplates = 5 [default = false];
  inline bool has_searchtemplates() const;
  inline void clear_searchtemplates();
  static const int kSearchTemplatesFieldNumber = 5;
  inline bool searchtemplates() const;
  inline void set_searchtemplates(bool value);
  
  // optional bool sourceUSDA = 6 [default = true];
  inline bool has_sourceusda() const;
  inline void clear_sourceusda();
  static const int kSourceUSDAFieldNumber = 6;
  inline bool sourceusda() const;
  inline void set_sourceusda(bool value);
  
  // optional bool sourceImport = 7 [default = true];
  inline bool has_sourceimport() const;
  inline void clear_sourceimport();
  static const int kSourceImportFieldNumber = 7;
  inline bool sourceimport() const;
  inline void set_sourceimport(bool value);
  
  // optional bool sourceSelf = 8 [default = true];
  inline bool has_sourceself() const;
  inline void clear_sourceself();
  static const int kSourceSelfFieldNumber = 8;
  inline bool sourceself() const;
  inline void set_sourceself(bool value);
  
  // optional bool sourceOthers = 9 [default = true];
  inline bool has_sourceothers() const;
  inline void clear_sourceothers();
  static const int kSourceOthersFieldNumber = 9;
  inline bool sourceothers() const;
  inline void set_sourceothers(bool value);
  
  // optional bool includeExpired = 10 [default = false];
  inline bool has_includeexpired() const;
  inline void clear_includeexpired();
  static const int kIncludeExpiredFieldNumber = 10;
  inline bool includeexpired() const;
  inline void set_includeexpired(bool value);
  
  // optional int32 maxResults = 11 [default = 1000];
  inline bool has_maxresults() const;
  inline void clear_maxresults();
  static const int kMaxResultsFieldNumber = 11;
  inline ::google::protobuf::int32 maxresults() const;
  inline void set_maxresults(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SearchRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* searchterms_;
  static const ::std::string _default_searchterms_;
  ::google::protobuf::RepeatedPtrField< ::std::string> excludegroupids_;
  bool searchsinglefoods_;
  bool searchcomposites_;
  bool searchtemplates_;
  bool sourceusda_;
  bool sourceimport_;
  bool sourceself_;
  bool sourceothers_;
  bool includeexpired_;
  ::google::protobuf::int32 maxresults_;
  friend void  protobuf_AddDesc_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto();
  friend void protobuf_AssignDesc_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SearchRequest* default_instance_;
};
// -------------------------------------------------------------------

class SearchResult : public ::google::protobuf::Message {
 public:
  SearchResult();
  virtual ~SearchResult();
  
  SearchResult(const SearchResult& from);
  
  inline SearchResult& operator=(const SearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResult& default_instance();
  
  void Swap(SearchResult* other);
  
  // implements Message ----------------------------------------------
  
  SearchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchResult& from);
  void MergeFrom(const SearchResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SearchResult_FoodType FoodType;
  static const FoodType SingleFood = SearchResult_FoodType_SingleFood;
  static const FoodType CompositeFood = SearchResult_FoodType_CompositeFood;
  static const FoodType Template = SearchResult_FoodType_Template;
  static inline bool FoodType_IsValid(int value) {
    return SearchResult_FoodType_IsValid(value);
  }
  static const FoodType FoodType_MIN =
    SearchResult_FoodType_FoodType_MIN;
  static const FoodType FoodType_MAX =
    SearchResult_FoodType_FoodType_MAX;
  static const int FoodType_ARRAYSIZE =
    SearchResult_FoodType_FoodType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FoodType_descriptor() {
    return SearchResult_FoodType_descriptor();
  }
  static inline const ::std::string& FoodType_Name(FoodType value) {
    return SearchResult_FoodType_Name(value);
  }
  static inline bool FoodType_Parse(const ::std::string& name,
      FoodType* value) {
    return SearchResult_FoodType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string displayName = 1;
  inline bool has_displayname() const;
  inline void clear_displayname();
  static const int kDisplayNameFieldNumber = 1;
  inline const ::std::string& displayname() const;
  inline void set_displayname(const ::std::string& value);
  inline void set_displayname(const char* value);
  inline void set_displayname(const char* value, size_t size);
  inline ::std::string* mutable_displayname();
  
  // optional .SearchResult.FoodType foodType = 2;
  inline bool has_foodtype() const;
  inline void clear_foodtype();
  static const int kFoodTypeFieldNumber = 2;
  inline ::SearchResult_FoodType foodtype() const;
  inline void set_foodtype(::SearchResult_FoodType value);
  
  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SearchResult)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* displayname_;
  static const ::std::string _default_displayname_;
  int foodtype_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto();
  friend void protobuf_AssignDesc_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SearchResult* default_instance_;
};
// -------------------------------------------------------------------

class SearchResponse : public ::google::protobuf::Message {
 public:
  SearchResponse();
  virtual ~SearchResponse();
  
  SearchResponse(const SearchResponse& from);
  
  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResponse& default_instance();
  
  void Swap(SearchResponse* other);
  
  // implements Message ----------------------------------------------
  
  SearchResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .SearchResult results = 1;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 1;
  inline const ::SearchResult& results(int index) const;
  inline ::SearchResult* mutable_results(int index);
  inline ::SearchResult* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::SearchResult >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::SearchResult >*
      mutable_results();
  
  // optional .Error error = 100;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 100;
  inline const ::Error& error() const;
  inline ::Error* mutable_error();
  
  // @@protoc_insertion_point(class_scope:SearchResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::SearchResult > results_;
  ::Error* error_;
  friend void  protobuf_AddDesc_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto();
  friend void protobuf_AssignDesc_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SearchResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// SearchRequest

// required string searchTerms = 1;
inline bool SearchRequest::has_searchterms() const {
  return _has_bit(0);
}
inline void SearchRequest::clear_searchterms() {
  if (searchterms_ != &_default_searchterms_) {
    searchterms_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SearchRequest::searchterms() const {
  return *searchterms_;
}
inline void SearchRequest::set_searchterms(const ::std::string& value) {
  _set_bit(0);
  if (searchterms_ == &_default_searchterms_) {
    searchterms_ = new ::std::string;
  }
  searchterms_->assign(value);
}
inline void SearchRequest::set_searchterms(const char* value) {
  _set_bit(0);
  if (searchterms_ == &_default_searchterms_) {
    searchterms_ = new ::std::string;
  }
  searchterms_->assign(value);
}
inline void SearchRequest::set_searchterms(const char* value, size_t size) {
  _set_bit(0);
  if (searchterms_ == &_default_searchterms_) {
    searchterms_ = new ::std::string;
  }
  searchterms_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchRequest::mutable_searchterms() {
  _set_bit(0);
  if (searchterms_ == &_default_searchterms_) {
    searchterms_ = new ::std::string;
  }
  return searchterms_;
}

// repeated string excludeGroupIds = 2;
inline int SearchRequest::excludegroupids_size() const {
  return excludegroupids_.size();
}
inline void SearchRequest::clear_excludegroupids() {
  excludegroupids_.Clear();
}
inline const ::std::string& SearchRequest::excludegroupids(int index) const {
  return excludegroupids_.Get(index);
}
inline ::std::string* SearchRequest::mutable_excludegroupids(int index) {
  return excludegroupids_.Mutable(index);
}
inline void SearchRequest::set_excludegroupids(int index, const ::std::string& value) {
  excludegroupids_.Mutable(index)->assign(value);
}
inline void SearchRequest::set_excludegroupids(int index, const char* value) {
  excludegroupids_.Mutable(index)->assign(value);
}
inline void SearchRequest::set_excludegroupids(int index, const char* value, size_t size) {
  excludegroupids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchRequest::add_excludegroupids() {
  return excludegroupids_.Add();
}
inline void SearchRequest::add_excludegroupids(const ::std::string& value) {
  excludegroupids_.Add()->assign(value);
}
inline void SearchRequest::add_excludegroupids(const char* value) {
  excludegroupids_.Add()->assign(value);
}
inline void SearchRequest::add_excludegroupids(const char* value, size_t size) {
  excludegroupids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchRequest::excludegroupids() const {
  return excludegroupids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchRequest::mutable_excludegroupids() {
  return &excludegroupids_;
}

// optional bool searchSingleFoods = 3 [default = true];
inline bool SearchRequest::has_searchsinglefoods() const {
  return _has_bit(2);
}
inline void SearchRequest::clear_searchsinglefoods() {
  searchsinglefoods_ = true;
  _clear_bit(2);
}
inline bool SearchRequest::searchsinglefoods() const {
  return searchsinglefoods_;
}
inline void SearchRequest::set_searchsinglefoods(bool value) {
  _set_bit(2);
  searchsinglefoods_ = value;
}

// optional bool searchComposites = 4 [default = true];
inline bool SearchRequest::has_searchcomposites() const {
  return _has_bit(3);
}
inline void SearchRequest::clear_searchcomposites() {
  searchcomposites_ = true;
  _clear_bit(3);
}
inline bool SearchRequest::searchcomposites() const {
  return searchcomposites_;
}
inline void SearchRequest::set_searchcomposites(bool value) {
  _set_bit(3);
  searchcomposites_ = value;
}

// optional bool searchTemplates = 5 [default = false];
inline bool SearchRequest::has_searchtemplates() const {
  return _has_bit(4);
}
inline void SearchRequest::clear_searchtemplates() {
  searchtemplates_ = false;
  _clear_bit(4);
}
inline bool SearchRequest::searchtemplates() const {
  return searchtemplates_;
}
inline void SearchRequest::set_searchtemplates(bool value) {
  _set_bit(4);
  searchtemplates_ = value;
}

// optional bool sourceUSDA = 6 [default = true];
inline bool SearchRequest::has_sourceusda() const {
  return _has_bit(5);
}
inline void SearchRequest::clear_sourceusda() {
  sourceusda_ = true;
  _clear_bit(5);
}
inline bool SearchRequest::sourceusda() const {
  return sourceusda_;
}
inline void SearchRequest::set_sourceusda(bool value) {
  _set_bit(5);
  sourceusda_ = value;
}

// optional bool sourceImport = 7 [default = true];
inline bool SearchRequest::has_sourceimport() const {
  return _has_bit(6);
}
inline void SearchRequest::clear_sourceimport() {
  sourceimport_ = true;
  _clear_bit(6);
}
inline bool SearchRequest::sourceimport() const {
  return sourceimport_;
}
inline void SearchRequest::set_sourceimport(bool value) {
  _set_bit(6);
  sourceimport_ = value;
}

// optional bool sourceSelf = 8 [default = true];
inline bool SearchRequest::has_sourceself() const {
  return _has_bit(7);
}
inline void SearchRequest::clear_sourceself() {
  sourceself_ = true;
  _clear_bit(7);
}
inline bool SearchRequest::sourceself() const {
  return sourceself_;
}
inline void SearchRequest::set_sourceself(bool value) {
  _set_bit(7);
  sourceself_ = value;
}

// optional bool sourceOthers = 9 [default = true];
inline bool SearchRequest::has_sourceothers() const {
  return _has_bit(8);
}
inline void SearchRequest::clear_sourceothers() {
  sourceothers_ = true;
  _clear_bit(8);
}
inline bool SearchRequest::sourceothers() const {
  return sourceothers_;
}
inline void SearchRequest::set_sourceothers(bool value) {
  _set_bit(8);
  sourceothers_ = value;
}

// optional bool includeExpired = 10 [default = false];
inline bool SearchRequest::has_includeexpired() const {
  return _has_bit(9);
}
inline void SearchRequest::clear_includeexpired() {
  includeexpired_ = false;
  _clear_bit(9);
}
inline bool SearchRequest::includeexpired() const {
  return includeexpired_;
}
inline void SearchRequest::set_includeexpired(bool value) {
  _set_bit(9);
  includeexpired_ = value;
}

// optional int32 maxResults = 11 [default = 1000];
inline bool SearchRequest::has_maxresults() const {
  return _has_bit(10);
}
inline void SearchRequest::clear_maxresults() {
  maxresults_ = 1000;
  _clear_bit(10);
}
inline ::google::protobuf::int32 SearchRequest::maxresults() const {
  return maxresults_;
}
inline void SearchRequest::set_maxresults(::google::protobuf::int32 value) {
  _set_bit(10);
  maxresults_ = value;
}

// -------------------------------------------------------------------

// SearchResult

// optional string displayName = 1;
inline bool SearchResult::has_displayname() const {
  return _has_bit(0);
}
inline void SearchResult::clear_displayname() {
  if (displayname_ != &_default_displayname_) {
    displayname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SearchResult::displayname() const {
  return *displayname_;
}
inline void SearchResult::set_displayname(const ::std::string& value) {
  _set_bit(0);
  if (displayname_ == &_default_displayname_) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(value);
}
inline void SearchResult::set_displayname(const char* value) {
  _set_bit(0);
  if (displayname_ == &_default_displayname_) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(value);
}
inline void SearchResult::set_displayname(const char* value, size_t size) {
  _set_bit(0);
  if (displayname_ == &_default_displayname_) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchResult::mutable_displayname() {
  _set_bit(0);
  if (displayname_ == &_default_displayname_) {
    displayname_ = new ::std::string;
  }
  return displayname_;
}

// optional .SearchResult.FoodType foodType = 2;
inline bool SearchResult::has_foodtype() const {
  return _has_bit(1);
}
inline void SearchResult::clear_foodtype() {
  foodtype_ = 0;
  _clear_bit(1);
}
inline ::SearchResult_FoodType SearchResult::foodtype() const {
  return static_cast< ::SearchResult_FoodType >(foodtype_);
}
inline void SearchResult::set_foodtype(::SearchResult_FoodType value) {
  GOOGLE_DCHECK(::SearchResult_FoodType_IsValid(value));
  _set_bit(1);
  foodtype_ = value;
}

// optional int32 id = 3;
inline bool SearchResult::has_id() const {
  return _has_bit(2);
}
inline void SearchResult::clear_id() {
  id_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 SearchResult::id() const {
  return id_;
}
inline void SearchResult::set_id(::google::protobuf::int32 value) {
  _set_bit(2);
  id_ = value;
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .SearchResult results = 1;
inline int SearchResponse::results_size() const {
  return results_.size();
}
inline void SearchResponse::clear_results() {
  results_.Clear();
}
inline const ::SearchResult& SearchResponse::results(int index) const {
  return results_.Get(index);
}
inline ::SearchResult* SearchResponse::mutable_results(int index) {
  return results_.Mutable(index);
}
inline ::SearchResult* SearchResponse::add_results() {
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SearchResult >&
SearchResponse::results() const {
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::SearchResult >*
SearchResponse::mutable_results() {
  return &results_;
}

// optional .Error error = 100;
inline bool SearchResponse::has_error() const {
  return _has_bit(1);
}
inline void SearchResponse::clear_error() {
  if (error_ != NULL) error_->::Error::Clear();
  _clear_bit(1);
}
inline const ::Error& SearchResponse::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::Error* SearchResponse::mutable_error() {
  _set_bit(1);
  if (error_ == NULL) error_ = new ::Error;
  return error_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SearchResult_FoodType>() {
  return ::SearchResult_FoodType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_libnutrition_2fproto_2fservice_2fsearch_5fmessages_2eproto__INCLUDED
