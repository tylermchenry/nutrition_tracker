// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libnutrition/proto/service/single_food_messages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SingleFoodLoadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleFoodLoadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleFoodLoadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleFoodLoadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleFoodStoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleFoodStoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleFoodStoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleFoodStoreResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleFoodDeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleFoodDeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleFoodDeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleFoodDeleteResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto() {
  protobuf_AddDesc_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "libnutrition/proto/service/single_food_messages.proto");
  GOOGLE_CHECK(file != NULL);
  SingleFoodLoadRequest_descriptor_ = file->message_type(0);
  static const int SingleFoodLoadRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodLoadRequest, omit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodLoadRequest, nameandidonly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodLoadRequest, requestedids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodLoadRequest, requesteduserids_),
  };
  SingleFoodLoadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleFoodLoadRequest_descriptor_,
      SingleFoodLoadRequest::default_instance_,
      SingleFoodLoadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodLoadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodLoadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleFoodLoadRequest));
  SingleFoodLoadResponse_descriptor_ = file->message_type(1);
  static const int SingleFoodLoadResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodLoadResponse, singlefoods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodLoadResponse, error_),
  };
  SingleFoodLoadResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleFoodLoadResponse_descriptor_,
      SingleFoodLoadResponse::default_instance_,
      SingleFoodLoadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodLoadResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodLoadResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleFoodLoadResponse));
  SingleFoodStoreRequest_descriptor_ = file->message_type(2);
  static const int SingleFoodStoreRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodStoreRequest, singlefoods_),
  };
  SingleFoodStoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleFoodStoreRequest_descriptor_,
      SingleFoodStoreRequest::default_instance_,
      SingleFoodStoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodStoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodStoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleFoodStoreRequest));
  SingleFoodStoreResponse_descriptor_ = file->message_type(3);
  static const int SingleFoodStoreResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodStoreResponse, storedids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodStoreResponse, error_),
  };
  SingleFoodStoreResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleFoodStoreResponse_descriptor_,
      SingleFoodStoreResponse::default_instance_,
      SingleFoodStoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodStoreResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodStoreResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleFoodStoreResponse));
  SingleFoodDeleteRequest_descriptor_ = file->message_type(4);
  static const int SingleFoodDeleteRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodDeleteRequest, deleteids_),
  };
  SingleFoodDeleteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleFoodDeleteRequest_descriptor_,
      SingleFoodDeleteRequest::default_instance_,
      SingleFoodDeleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodDeleteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodDeleteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleFoodDeleteRequest));
  SingleFoodDeleteResponse_descriptor_ = file->message_type(5);
  static const int SingleFoodDeleteResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodDeleteResponse, deletedids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodDeleteResponse, error_),
  };
  SingleFoodDeleteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleFoodDeleteResponse_descriptor_,
      SingleFoodDeleteResponse::default_instance_,
      SingleFoodDeleteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodDeleteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodDeleteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleFoodDeleteResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleFoodLoadRequest_descriptor_, &SingleFoodLoadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleFoodLoadResponse_descriptor_, &SingleFoodLoadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleFoodStoreRequest_descriptor_, &SingleFoodStoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleFoodStoreResponse_descriptor_, &SingleFoodStoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleFoodDeleteRequest_descriptor_, &SingleFoodDeleteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleFoodDeleteResponse_descriptor_, &SingleFoodDeleteResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto() {
  delete SingleFoodLoadRequest::default_instance_;
  delete SingleFoodLoadRequest_reflection_;
  delete SingleFoodLoadResponse::default_instance_;
  delete SingleFoodLoadResponse_reflection_;
  delete SingleFoodStoreRequest::default_instance_;
  delete SingleFoodStoreRequest_reflection_;
  delete SingleFoodStoreResponse::default_instance_;
  delete SingleFoodStoreResponse_reflection_;
  delete SingleFoodDeleteRequest::default_instance_;
  delete SingleFoodDeleteRequest_reflection_;
  delete SingleFoodDeleteResponse::default_instance_;
  delete SingleFoodDeleteResponse_reflection_;
}

void protobuf_AddDesc_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();
  ::protobuf_AddDesc_libnutrition_2fproto_2fservice_2ferror_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n5libnutrition/proto/service/single_food"
    "_messages.proto\032)libnutrition/proto/data"
    "/single_food.proto\032&libnutrition/proto/s"
    "ervice/error.proto\"z\n\025SingleFoodLoadRequ"
    "est\022\023\n\004omit\030\001 \001(\010:\005false\022\034\n\rnameAndIdOnl"
    "y\030\002 \001(\010:\005false\022\024\n\014requestedIds\030\003 \003(\005\022\030\n\020"
    "requestedUserIds\030\004 \003(\005\"U\n\026SingleFoodLoad"
    "Response\022$\n\013singleFoods\030\001 \003(\0132\017.SingleFo"
    "odData\022\025\n\005error\030d \001(\0132\006.Error\">\n\026SingleF"
    "oodStoreRequest\022$\n\013singleFoods\030\001 \003(\0132\017.S"
    "ingleFoodData\"C\n\027SingleFoodStoreResponse"
    "\022\021\n\tstoredIds\030\001 \003(\005\022\025\n\005error\030d \001(\0132\006.Err"
    "or\",\n\027SingleFoodDeleteRequest\022\021\n\tdeleteI"
    "ds\030\001 \003(\005\"E\n\030SingleFoodDeleteResponse\022\022\n\n"
    "deletedIds\030\001 \003(\005\022\025\n\005error\030d \001(\0132\006.Error", 599);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "libnutrition/proto/service/single_food_messages.proto", &protobuf_RegisterTypes);
  SingleFoodLoadRequest::default_instance_ = new SingleFoodLoadRequest();
  SingleFoodLoadResponse::default_instance_ = new SingleFoodLoadResponse();
  SingleFoodStoreRequest::default_instance_ = new SingleFoodStoreRequest();
  SingleFoodStoreResponse::default_instance_ = new SingleFoodStoreResponse();
  SingleFoodDeleteRequest::default_instance_ = new SingleFoodDeleteRequest();
  SingleFoodDeleteResponse::default_instance_ = new SingleFoodDeleteResponse();
  SingleFoodLoadRequest::default_instance_->InitAsDefaultInstance();
  SingleFoodLoadResponse::default_instance_->InitAsDefaultInstance();
  SingleFoodStoreRequest::default_instance_->InitAsDefaultInstance();
  SingleFoodStoreResponse::default_instance_->InitAsDefaultInstance();
  SingleFoodDeleteRequest::default_instance_->InitAsDefaultInstance();
  SingleFoodDeleteResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto {
  StaticDescriptorInitializer_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto() {
    protobuf_AddDesc_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto();
  }
} static_descriptor_initializer_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SingleFoodLoadRequest::kOmitFieldNumber;
const int SingleFoodLoadRequest::kNameAndIdOnlyFieldNumber;
const int SingleFoodLoadRequest::kRequestedIdsFieldNumber;
const int SingleFoodLoadRequest::kRequestedUserIdsFieldNumber;
#endif  // !_MSC_VER

SingleFoodLoadRequest::SingleFoodLoadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleFoodLoadRequest::InitAsDefaultInstance() {
}

SingleFoodLoadRequest::SingleFoodLoadRequest(const SingleFoodLoadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleFoodLoadRequest::SharedCtor() {
  _cached_size_ = 0;
  omit_ = false;
  nameandidonly_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleFoodLoadRequest::~SingleFoodLoadRequest() {
  SharedDtor();
}

void SingleFoodLoadRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleFoodLoadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleFoodLoadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleFoodLoadRequest_descriptor_;
}

const SingleFoodLoadRequest& SingleFoodLoadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto();  return *default_instance_;
}

SingleFoodLoadRequest* SingleFoodLoadRequest::default_instance_ = NULL;

SingleFoodLoadRequest* SingleFoodLoadRequest::New() const {
  return new SingleFoodLoadRequest;
}

void SingleFoodLoadRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    omit_ = false;
    nameandidonly_ = false;
  }
  requestedids_.Clear();
  requesteduserids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleFoodLoadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool omit = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &omit_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nameAndIdOnly;
        break;
      }
      
      // optional bool nameAndIdOnly = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nameAndIdOnly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nameandidonly_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_requestedIds;
        break;
      }
      
      // repeated int32 requestedIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestedIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_requestedids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_requestedids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_requestedIds;
        if (input->ExpectTag(32)) goto parse_requestedUserIds;
        break;
      }
      
      // repeated int32 requestedUserIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestedUserIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_requesteduserids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_requesteduserids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_requestedUserIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleFoodLoadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool omit = 1 [default = false];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->omit(), output);
  }
  
  // optional bool nameAndIdOnly = 2 [default = false];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->nameandidonly(), output);
  }
  
  // repeated int32 requestedIds = 3;
  for (int i = 0; i < this->requestedids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->requestedids(i), output);
  }
  
  // repeated int32 requestedUserIds = 4;
  for (int i = 0; i < this->requesteduserids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->requesteduserids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleFoodLoadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool omit = 1 [default = false];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->omit(), target);
  }
  
  // optional bool nameAndIdOnly = 2 [default = false];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->nameandidonly(), target);
  }
  
  // repeated int32 requestedIds = 3;
  for (int i = 0; i < this->requestedids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->requestedids(i), target);
  }
  
  // repeated int32 requestedUserIds = 4;
  for (int i = 0; i < this->requesteduserids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->requesteduserids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleFoodLoadRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool omit = 1 [default = false];
    if (has_omit()) {
      total_size += 1 + 1;
    }
    
    // optional bool nameAndIdOnly = 2 [default = false];
    if (has_nameandidonly()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 requestedIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->requestedids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->requestedids(i));
    }
    total_size += 1 * this->requestedids_size() + data_size;
  }
  
  // repeated int32 requestedUserIds = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->requesteduserids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->requesteduserids(i));
    }
    total_size += 1 * this->requesteduserids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleFoodLoadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleFoodLoadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleFoodLoadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleFoodLoadRequest::MergeFrom(const SingleFoodLoadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requestedids_.MergeFrom(from.requestedids_);
  requesteduserids_.MergeFrom(from.requesteduserids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_omit(from.omit());
    }
    if (from._has_bit(1)) {
      set_nameandidonly(from.nameandidonly());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleFoodLoadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleFoodLoadRequest::CopyFrom(const SingleFoodLoadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleFoodLoadRequest::IsInitialized() const {
  
  return true;
}

void SingleFoodLoadRequest::Swap(SingleFoodLoadRequest* other) {
  if (other != this) {
    std::swap(omit_, other->omit_);
    std::swap(nameandidonly_, other->nameandidonly_);
    requestedids_.Swap(&other->requestedids_);
    requesteduserids_.Swap(&other->requesteduserids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleFoodLoadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleFoodLoadRequest_descriptor_;
  metadata.reflection = SingleFoodLoadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleFoodLoadResponse::kSingleFoodsFieldNumber;
const int SingleFoodLoadResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

SingleFoodLoadResponse::SingleFoodLoadResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleFoodLoadResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::Error*>(&::Error::default_instance());
}

SingleFoodLoadResponse::SingleFoodLoadResponse(const SingleFoodLoadResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleFoodLoadResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleFoodLoadResponse::~SingleFoodLoadResponse() {
  SharedDtor();
}

void SingleFoodLoadResponse::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void SingleFoodLoadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleFoodLoadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleFoodLoadResponse_descriptor_;
}

const SingleFoodLoadResponse& SingleFoodLoadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto();  return *default_instance_;
}

SingleFoodLoadResponse* SingleFoodLoadResponse::default_instance_ = NULL;

SingleFoodLoadResponse* SingleFoodLoadResponse::New() const {
  return new SingleFoodLoadResponse;
}

void SingleFoodLoadResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (error_ != NULL) error_->::Error::Clear();
    }
  }
  singlefoods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleFoodLoadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SingleFoodData singleFoods = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_singleFoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_singlefoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_singleFoods;
        if (input->ExpectTag(802)) goto parse_error;
        break;
      }
      
      // optional .Error error = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleFoodLoadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SingleFoodData singleFoods = 1;
  for (int i = 0; i < this->singlefoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->singlefoods(i), output);
  }
  
  // optional .Error error = 100;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleFoodLoadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SingleFoodData singleFoods = 1;
  for (int i = 0; i < this->singlefoods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->singlefoods(i), target);
  }
  
  // optional .Error error = 100;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleFoodLoadResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .Error error = 100;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .SingleFoodData singleFoods = 1;
  total_size += 1 * this->singlefoods_size();
  for (int i = 0; i < this->singlefoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->singlefoods(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleFoodLoadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleFoodLoadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleFoodLoadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleFoodLoadResponse::MergeFrom(const SingleFoodLoadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  singlefoods_.MergeFrom(from.singlefoods_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      mutable_error()->::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleFoodLoadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleFoodLoadResponse::CopyFrom(const SingleFoodLoadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleFoodLoadResponse::IsInitialized() const {
  
  for (int i = 0; i < singlefoods_size(); i++) {
    if (!this->singlefoods(i).IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void SingleFoodLoadResponse::Swap(SingleFoodLoadResponse* other) {
  if (other != this) {
    singlefoods_.Swap(&other->singlefoods_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleFoodLoadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleFoodLoadResponse_descriptor_;
  metadata.reflection = SingleFoodLoadResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleFoodStoreRequest::kSingleFoodsFieldNumber;
#endif  // !_MSC_VER

SingleFoodStoreRequest::SingleFoodStoreRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleFoodStoreRequest::InitAsDefaultInstance() {
}

SingleFoodStoreRequest::SingleFoodStoreRequest(const SingleFoodStoreRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleFoodStoreRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleFoodStoreRequest::~SingleFoodStoreRequest() {
  SharedDtor();
}

void SingleFoodStoreRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleFoodStoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleFoodStoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleFoodStoreRequest_descriptor_;
}

const SingleFoodStoreRequest& SingleFoodStoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto();  return *default_instance_;
}

SingleFoodStoreRequest* SingleFoodStoreRequest::default_instance_ = NULL;

SingleFoodStoreRequest* SingleFoodStoreRequest::New() const {
  return new SingleFoodStoreRequest;
}

void SingleFoodStoreRequest::Clear() {
  singlefoods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleFoodStoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SingleFoodData singleFoods = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_singleFoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_singlefoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_singleFoods;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleFoodStoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SingleFoodData singleFoods = 1;
  for (int i = 0; i < this->singlefoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->singlefoods(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleFoodStoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SingleFoodData singleFoods = 1;
  for (int i = 0; i < this->singlefoods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->singlefoods(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleFoodStoreRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .SingleFoodData singleFoods = 1;
  total_size += 1 * this->singlefoods_size();
  for (int i = 0; i < this->singlefoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->singlefoods(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleFoodStoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleFoodStoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleFoodStoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleFoodStoreRequest::MergeFrom(const SingleFoodStoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  singlefoods_.MergeFrom(from.singlefoods_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleFoodStoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleFoodStoreRequest::CopyFrom(const SingleFoodStoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleFoodStoreRequest::IsInitialized() const {
  
  for (int i = 0; i < singlefoods_size(); i++) {
    if (!this->singlefoods(i).IsInitialized()) return false;
  }
  return true;
}

void SingleFoodStoreRequest::Swap(SingleFoodStoreRequest* other) {
  if (other != this) {
    singlefoods_.Swap(&other->singlefoods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleFoodStoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleFoodStoreRequest_descriptor_;
  metadata.reflection = SingleFoodStoreRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleFoodStoreResponse::kStoredIdsFieldNumber;
const int SingleFoodStoreResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

SingleFoodStoreResponse::SingleFoodStoreResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleFoodStoreResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::Error*>(&::Error::default_instance());
}

SingleFoodStoreResponse::SingleFoodStoreResponse(const SingleFoodStoreResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleFoodStoreResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleFoodStoreResponse::~SingleFoodStoreResponse() {
  SharedDtor();
}

void SingleFoodStoreResponse::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void SingleFoodStoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleFoodStoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleFoodStoreResponse_descriptor_;
}

const SingleFoodStoreResponse& SingleFoodStoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto();  return *default_instance_;
}

SingleFoodStoreResponse* SingleFoodStoreResponse::default_instance_ = NULL;

SingleFoodStoreResponse* SingleFoodStoreResponse::New() const {
  return new SingleFoodStoreResponse;
}

void SingleFoodStoreResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (error_ != NULL) error_->::Error::Clear();
    }
  }
  storedids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleFoodStoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 storedIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storedIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_storedids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_storedids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_storedIds;
        if (input->ExpectTag(802)) goto parse_error;
        break;
      }
      
      // optional .Error error = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleFoodStoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 storedIds = 1;
  for (int i = 0; i < this->storedids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->storedids(i), output);
  }
  
  // optional .Error error = 100;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleFoodStoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 storedIds = 1;
  for (int i = 0; i < this->storedids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->storedids(i), target);
  }
  
  // optional .Error error = 100;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleFoodStoreResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .Error error = 100;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated int32 storedIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->storedids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->storedids(i));
    }
    total_size += 1 * this->storedids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleFoodStoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleFoodStoreResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleFoodStoreResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleFoodStoreResponse::MergeFrom(const SingleFoodStoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  storedids_.MergeFrom(from.storedids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      mutable_error()->::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleFoodStoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleFoodStoreResponse::CopyFrom(const SingleFoodStoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleFoodStoreResponse::IsInitialized() const {
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void SingleFoodStoreResponse::Swap(SingleFoodStoreResponse* other) {
  if (other != this) {
    storedids_.Swap(&other->storedids_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleFoodStoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleFoodStoreResponse_descriptor_;
  metadata.reflection = SingleFoodStoreResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleFoodDeleteRequest::kDeleteIdsFieldNumber;
#endif  // !_MSC_VER

SingleFoodDeleteRequest::SingleFoodDeleteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleFoodDeleteRequest::InitAsDefaultInstance() {
}

SingleFoodDeleteRequest::SingleFoodDeleteRequest(const SingleFoodDeleteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleFoodDeleteRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleFoodDeleteRequest::~SingleFoodDeleteRequest() {
  SharedDtor();
}

void SingleFoodDeleteRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleFoodDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleFoodDeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleFoodDeleteRequest_descriptor_;
}

const SingleFoodDeleteRequest& SingleFoodDeleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto();  return *default_instance_;
}

SingleFoodDeleteRequest* SingleFoodDeleteRequest::default_instance_ = NULL;

SingleFoodDeleteRequest* SingleFoodDeleteRequest::New() const {
  return new SingleFoodDeleteRequest;
}

void SingleFoodDeleteRequest::Clear() {
  deleteids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleFoodDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 deleteIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deleteIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_deleteids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deleteids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_deleteIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleFoodDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 deleteIds = 1;
  for (int i = 0; i < this->deleteids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->deleteids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleFoodDeleteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 deleteIds = 1;
  for (int i = 0; i < this->deleteids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->deleteids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleFoodDeleteRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 deleteIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->deleteids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->deleteids(i));
    }
    total_size += 1 * this->deleteids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleFoodDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleFoodDeleteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleFoodDeleteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleFoodDeleteRequest::MergeFrom(const SingleFoodDeleteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  deleteids_.MergeFrom(from.deleteids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleFoodDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleFoodDeleteRequest::CopyFrom(const SingleFoodDeleteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleFoodDeleteRequest::IsInitialized() const {
  
  return true;
}

void SingleFoodDeleteRequest::Swap(SingleFoodDeleteRequest* other) {
  if (other != this) {
    deleteids_.Swap(&other->deleteids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleFoodDeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleFoodDeleteRequest_descriptor_;
  metadata.reflection = SingleFoodDeleteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleFoodDeleteResponse::kDeletedIdsFieldNumber;
const int SingleFoodDeleteResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

SingleFoodDeleteResponse::SingleFoodDeleteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleFoodDeleteResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::Error*>(&::Error::default_instance());
}

SingleFoodDeleteResponse::SingleFoodDeleteResponse(const SingleFoodDeleteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleFoodDeleteResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleFoodDeleteResponse::~SingleFoodDeleteResponse() {
  SharedDtor();
}

void SingleFoodDeleteResponse::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void SingleFoodDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleFoodDeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleFoodDeleteResponse_descriptor_;
}

const SingleFoodDeleteResponse& SingleFoodDeleteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fservice_2fsingle_5ffood_5fmessages_2eproto();  return *default_instance_;
}

SingleFoodDeleteResponse* SingleFoodDeleteResponse::default_instance_ = NULL;

SingleFoodDeleteResponse* SingleFoodDeleteResponse::New() const {
  return new SingleFoodDeleteResponse;
}

void SingleFoodDeleteResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (error_ != NULL) error_->::Error::Clear();
    }
  }
  deletedids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleFoodDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 deletedIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deletedIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_deletedids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deletedids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_deletedIds;
        if (input->ExpectTag(802)) goto parse_error;
        break;
      }
      
      // optional .Error error = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleFoodDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 deletedIds = 1;
  for (int i = 0; i < this->deletedids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->deletedids(i), output);
  }
  
  // optional .Error error = 100;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleFoodDeleteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 deletedIds = 1;
  for (int i = 0; i < this->deletedids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->deletedids(i), target);
  }
  
  // optional .Error error = 100;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleFoodDeleteResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .Error error = 100;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated int32 deletedIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->deletedids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->deletedids(i));
    }
    total_size += 1 * this->deletedids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleFoodDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleFoodDeleteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleFoodDeleteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleFoodDeleteResponse::MergeFrom(const SingleFoodDeleteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  deletedids_.MergeFrom(from.deletedids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      mutable_error()->::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleFoodDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleFoodDeleteResponse::CopyFrom(const SingleFoodDeleteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleFoodDeleteResponse::IsInitialized() const {
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void SingleFoodDeleteResponse::Swap(SingleFoodDeleteResponse* other) {
  if (other != this) {
    deletedids_.Swap(&other->deletedids_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleFoodDeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleFoodDeleteResponse_descriptor_;
  metadata.reflection = SingleFoodDeleteResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
