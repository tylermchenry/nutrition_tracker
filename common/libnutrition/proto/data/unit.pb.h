// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libnutrition/proto/data/unit.proto

#ifndef PROTOBUF_libnutrition_2fproto_2fdata_2funit_2eproto__INCLUDED
#define PROTOBUF_libnutrition_2fproto_2fdata_2funit_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2funit_2eproto();
void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2funit_2eproto();
void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2funit_2eproto();

class UnitData;

enum UnitData_Dimension {
  UnitData_Dimension_Weight = 0,
  UnitData_Dimension_Volume = 1,
  UnitData_Dimension_Quantity = 2,
  UnitData_Dimension_Serving = 3,
  UnitData_Dimension_Energy = 4,
  UnitData_Dimension_IU = 5
};
bool UnitData_Dimension_IsValid(int value);
const UnitData_Dimension UnitData_Dimension_Dimension_MIN = UnitData_Dimension_Weight;
const UnitData_Dimension UnitData_Dimension_Dimension_MAX = UnitData_Dimension_IU;
const int UnitData_Dimension_Dimension_ARRAYSIZE = UnitData_Dimension_Dimension_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnitData_Dimension_descriptor();
inline const ::std::string& UnitData_Dimension_Name(UnitData_Dimension value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnitData_Dimension_descriptor(), value);
}
inline bool UnitData_Dimension_Parse(
    const ::std::string& name, UnitData_Dimension* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnitData_Dimension>(
    UnitData_Dimension_descriptor(), name, value);
}
// ===================================================================

class UnitData : public ::google::protobuf::Message {
 public:
  UnitData();
  virtual ~UnitData();
  
  UnitData(const UnitData& from);
  
  inline UnitData& operator=(const UnitData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitData& default_instance();
  
  void Swap(UnitData* other);
  
  // implements Message ----------------------------------------------
  
  UnitData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnitData& from);
  void MergeFrom(const UnitData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UnitData_Dimension Dimension;
  static const Dimension Weight = UnitData_Dimension_Weight;
  static const Dimension Volume = UnitData_Dimension_Volume;
  static const Dimension Quantity = UnitData_Dimension_Quantity;
  static const Dimension Serving = UnitData_Dimension_Serving;
  static const Dimension Energy = UnitData_Dimension_Energy;
  static const Dimension IU = UnitData_Dimension_IU;
  static inline bool Dimension_IsValid(int value) {
    return UnitData_Dimension_IsValid(value);
  }
  static const Dimension Dimension_MIN =
    UnitData_Dimension_Dimension_MIN;
  static const Dimension Dimension_MAX =
    UnitData_Dimension_Dimension_MAX;
  static const int Dimension_ARRAYSIZE =
    UnitData_Dimension_Dimension_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Dimension_descriptor() {
    return UnitData_Dimension_descriptor();
  }
  static inline const ::std::string& Dimension_Name(Dimension value) {
    return UnitData_Dimension_Name(value);
  }
  static inline bool Dimension_Parse(const ::std::string& name,
      Dimension* value) {
    return UnitData_Dimension_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string abbreviation = 1;
  inline bool has_abbreviation() const;
  inline void clear_abbreviation();
  static const int kAbbreviationFieldNumber = 1;
  inline const ::std::string& abbreviation() const;
  inline void set_abbreviation(const ::std::string& value);
  inline void set_abbreviation(const char* value);
  inline void set_abbreviation(const char* value, size_t size);
  inline ::std::string* mutable_abbreviation();
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional .UnitData.Dimension dimension = 3;
  inline bool has_dimension() const;
  inline void clear_dimension();
  static const int kDimensionFieldNumber = 3;
  inline ::UnitData_Dimension dimension() const;
  inline void set_dimension(::UnitData_Dimension value);
  
  // optional double basicConversionFactor = 4;
  inline bool has_basicconversionfactor() const;
  inline void clear_basicconversionfactor();
  static const int kBasicConversionFactorFieldNumber = 4;
  inline double basicconversionfactor() const;
  inline void set_basicconversionfactor(double value);
  
  // optional bool isBasic = 5;
  inline bool has_isbasic() const;
  inline void clear_isbasic();
  static const int kIsBasicFieldNumber = 5;
  inline bool isbasic() const;
  inline void set_isbasic(bool value);
  
  // @@protoc_insertion_point(class_scope:UnitData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* abbreviation_;
  static const ::std::string _default_abbreviation_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  int dimension_;
  double basicconversionfactor_;
  bool isbasic_;
  friend void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2funit_2eproto();
  friend void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2funit_2eproto();
  friend void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2funit_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UnitData* default_instance_;
};
// ===================================================================


// ===================================================================

// UnitData

// optional string abbreviation = 1;
inline bool UnitData::has_abbreviation() const {
  return _has_bit(0);
}
inline void UnitData::clear_abbreviation() {
  if (abbreviation_ != &_default_abbreviation_) {
    abbreviation_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& UnitData::abbreviation() const {
  return *abbreviation_;
}
inline void UnitData::set_abbreviation(const ::std::string& value) {
  _set_bit(0);
  if (abbreviation_ == &_default_abbreviation_) {
    abbreviation_ = new ::std::string;
  }
  abbreviation_->assign(value);
}
inline void UnitData::set_abbreviation(const char* value) {
  _set_bit(0);
  if (abbreviation_ == &_default_abbreviation_) {
    abbreviation_ = new ::std::string;
  }
  abbreviation_->assign(value);
}
inline void UnitData::set_abbreviation(const char* value, size_t size) {
  _set_bit(0);
  if (abbreviation_ == &_default_abbreviation_) {
    abbreviation_ = new ::std::string;
  }
  abbreviation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitData::mutable_abbreviation() {
  _set_bit(0);
  if (abbreviation_ == &_default_abbreviation_) {
    abbreviation_ = new ::std::string;
  }
  return abbreviation_;
}

// optional string name = 2;
inline bool UnitData::has_name() const {
  return _has_bit(1);
}
inline void UnitData::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& UnitData::name() const {
  return *name_;
}
inline void UnitData::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UnitData::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UnitData::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnitData::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional .UnitData.Dimension dimension = 3;
inline bool UnitData::has_dimension() const {
  return _has_bit(2);
}
inline void UnitData::clear_dimension() {
  dimension_ = 0;
  _clear_bit(2);
}
inline ::UnitData_Dimension UnitData::dimension() const {
  return static_cast< ::UnitData_Dimension >(dimension_);
}
inline void UnitData::set_dimension(::UnitData_Dimension value) {
  GOOGLE_DCHECK(::UnitData_Dimension_IsValid(value));
  _set_bit(2);
  dimension_ = value;
}

// optional double basicConversionFactor = 4;
inline bool UnitData::has_basicconversionfactor() const {
  return _has_bit(3);
}
inline void UnitData::clear_basicconversionfactor() {
  basicconversionfactor_ = 0;
  _clear_bit(3);
}
inline double UnitData::basicconversionfactor() const {
  return basicconversionfactor_;
}
inline void UnitData::set_basicconversionfactor(double value) {
  _set_bit(3);
  basicconversionfactor_ = value;
}

// optional bool isBasic = 5;
inline bool UnitData::has_isbasic() const {
  return _has_bit(4);
}
inline void UnitData::clear_isbasic() {
  isbasic_ = false;
  _clear_bit(4);
}
inline bool UnitData::isbasic() const {
  return isbasic_;
}
inline void UnitData::set_isbasic(bool value) {
  _set_bit(4);
  isbasic_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UnitData_Dimension>() {
  return ::UnitData_Dimension_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_libnutrition_2fproto_2fdata_2funit_2eproto__INCLUDED
