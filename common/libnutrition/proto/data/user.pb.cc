// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libnutrition/proto/data/user.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* UserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fuser_2eproto() {
  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fuser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "libnutrition/proto/data/user.proto");
  GOOGLE_CHECK(file != NULL);
  UserData_descriptor_ = file->message_type(0);
  static const int UserData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, realname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, password_sha1_hex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, password_plain_),
  };
  UserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserData_descriptor_,
      UserData::default_instance_,
      UserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fuser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserData_descriptor_, &UserData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fuser_2eproto() {
  delete UserData::default_instance_;
  delete UserData_reflection_;
}

void protobuf_AddDesc_libnutrition_2fproto_2fdata_2fuser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"libnutrition/proto/data/user.proto\"q\n\010"
    "UserData\022\016\n\006userId\030\001 \001(\005\022\020\n\010username\030\002 \001"
    "(\t\022\020\n\010realName\030\003 \001(\t\022\031\n\021password_SHA1_he"
    "x\030\004 \001(\t\022\026\n\016password_plain\030\005 \001(\t", 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "libnutrition/proto/data/user.proto", &protobuf_RegisterTypes);
  UserData::default_instance_ = new UserData();
  UserData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fuser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_libnutrition_2fproto_2fdata_2fuser_2eproto {
  StaticDescriptorInitializer_libnutrition_2fproto_2fdata_2fuser_2eproto() {
    protobuf_AddDesc_libnutrition_2fproto_2fdata_2fuser_2eproto();
  }
} static_descriptor_initializer_libnutrition_2fproto_2fdata_2fuser_2eproto_;


// ===================================================================

const ::std::string UserData::_default_username_;
const ::std::string UserData::_default_realname_;
const ::std::string UserData::_default_password_sha1_hex_;
const ::std::string UserData::_default_password_plain_;
#ifndef _MSC_VER
const int UserData::kUserIdFieldNumber;
const int UserData::kUsernameFieldNumber;
const int UserData::kRealNameFieldNumber;
const int UserData::kPasswordSHA1HexFieldNumber;
const int UserData::kPasswordPlainFieldNumber;
#endif  // !_MSC_VER

UserData::UserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserData::InitAsDefaultInstance() {
}

UserData::UserData(const UserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserData::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  username_ = const_cast< ::std::string*>(&_default_username_);
  realname_ = const_cast< ::std::string*>(&_default_realname_);
  password_sha1_hex_ = const_cast< ::std::string*>(&_default_password_sha1_hex_);
  password_plain_ = const_cast< ::std::string*>(&_default_password_plain_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserData::~UserData() {
  SharedDtor();
}

void UserData::SharedDtor() {
  if (username_ != &_default_username_) {
    delete username_;
  }
  if (realname_ != &_default_realname_) {
    delete realname_;
  }
  if (password_sha1_hex_ != &_default_password_sha1_hex_) {
    delete password_sha1_hex_;
  }
  if (password_plain_ != &_default_password_plain_) {
    delete password_plain_;
  }
  if (this != default_instance_) {
  }
}

void UserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserData_descriptor_;
}

const UserData& UserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fdata_2fuser_2eproto();  return *default_instance_;
}

UserData* UserData::default_instance_ = NULL;

UserData* UserData::New() const {
  return new UserData;
}

void UserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (_has_bit(1)) {
      if (username_ != &_default_username_) {
        username_->clear();
      }
    }
    if (_has_bit(2)) {
      if (realname_ != &_default_realname_) {
        realname_->clear();
      }
    }
    if (_has_bit(3)) {
      if (password_sha1_hex_ != &_default_password_sha1_hex_) {
        password_sha1_hex_->clear();
      }
    }
    if (_has_bit(4)) {
      if (password_plain_ != &_default_password_plain_) {
        password_plain_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // optional string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_realName;
        break;
      }
      
      // optional string realName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_realName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->realname().data(), this->realname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password_SHA1_hex;
        break;
      }
      
      // optional string password_SHA1_hex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password_SHA1_hex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_sha1_hex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password_sha1_hex().data(), this->password_sha1_hex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_password_plain;
        break;
      }
      
      // optional string password_plain = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password_plain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_plain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password_plain().data(), this->password_plain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }
  
  // optional string username = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional string realName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->realname(), output);
  }
  
  // optional string password_SHA1_hex = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password_sha1_hex().data(), this->password_sha1_hex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password_sha1_hex(), output);
  }
  
  // optional string password_plain = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password_plain().data(), this->password_plain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->password_plain(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }
  
  // optional string username = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // optional string realName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->realname(), target);
  }
  
  // optional string password_SHA1_hex = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password_sha1_hex().data(), this->password_sha1_hex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password_sha1_hex(), target);
  }
  
  // optional string password_plain = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password_plain().data(), this->password_plain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password_plain(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string realName = 3;
    if (has_realname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realname());
    }
    
    // optional string password_SHA1_hex = 4;
    if (has_password_sha1_hex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_sha1_hex());
    }
    
    // optional string password_plain = 5;
    if (has_password_plain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_plain());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserData::MergeFrom(const UserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_username(from.username());
    }
    if (from._has_bit(2)) {
      set_realname(from.realname());
    }
    if (from._has_bit(3)) {
      set_password_sha1_hex(from.password_sha1_hex());
    }
    if (from._has_bit(4)) {
      set_password_plain(from.password_plain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData::CopyFrom(const UserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData::IsInitialized() const {
  
  return true;
}

void UserData::Swap(UserData* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(realname_, other->realname_);
    std::swap(password_sha1_hex_, other->password_sha1_hex_);
    std::swap(password_plain_, other->password_plain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserData_descriptor_;
  metadata.reflection = UserData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
