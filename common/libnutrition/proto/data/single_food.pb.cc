// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libnutrition/proto/data/single_food.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SingleFoodData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleFoodData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleFoodData_NutrientAmount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleFoodData_NutrientAmount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SingleFoodData_EntrySource_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto() {
  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "libnutrition/proto/data/single_food.proto");
  GOOGLE_CHECK(file != NULL);
  SingleFoodData_descriptor_ = file->message_type(0);
  static const int SingleFoodData_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, entrysource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, percentrefuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, refusedescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, nutrientamounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, weightamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, volumeamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, quantityamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, servingamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, energydensityfat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, energydensityprotein_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, energydensitycarbohydrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, energydensityalcohol_),
  };
  SingleFoodData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleFoodData_descriptor_,
      SingleFoodData::default_instance_,
      SingleFoodData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleFoodData));
  SingleFoodData_NutrientAmount_descriptor_ = SingleFoodData_descriptor_->nested_type(0);
  static const int SingleFoodData_NutrientAmount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData_NutrientAmount, nutrientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData_NutrientAmount, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData_NutrientAmount, unitabbreviation_),
  };
  SingleFoodData_NutrientAmount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleFoodData_NutrientAmount_descriptor_,
      SingleFoodData_NutrientAmount::default_instance_,
      SingleFoodData_NutrientAmount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData_NutrientAmount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFoodData_NutrientAmount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleFoodData_NutrientAmount));
  SingleFoodData_EntrySource_descriptor_ = SingleFoodData_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleFoodData_descriptor_, &SingleFoodData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleFoodData_NutrientAmount_descriptor_, &SingleFoodData_NutrientAmount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto() {
  delete SingleFoodData::default_instance_;
  delete SingleFoodData_reflection_;
  delete SingleFoodData_NutrientAmount::default_instance_;
  delete SingleFoodData_NutrientAmount_reflection_;
}

void protobuf_AddDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)libnutrition/proto/data/single_food.pr"
    "oto\"\301\004\n\016SingleFoodData\022\n\n\002id\030\001 \001(\005\022\014\n\004na"
    "me\030\002 \001(\t\022\017\n\007ownerId\030\003 \001(\005\0220\n\013entrySource"
    "\030\004 \001(\0162\033.SingleFoodData.EntrySource\022\017\n\007g"
    "roupId\030\005 \001(\t\022\025\n\rpercentRefuse\030\006 \001(\001\022\031\n\021r"
    "efuseDescription\030\007 \001(\t\0227\n\017nutrientAmount"
    "s\030\010 \003(\0132\036.SingleFoodData.NutrientAmount\022"
    "\024\n\014weightAmount\030\t \001(\001\022\024\n\014volumeAmount\030\n "
    "\001(\001\022\026\n\016quantityAmount\030\013 \001(\001\022\025\n\rservingAm"
    "ount\030\014 \001(\001\022\030\n\020energyDensityFat\030\r \001(\001\022\034\n\024"
    "energyDensityProtein\030\016 \001(\001\022!\n\031energyDens"
    "ityCarbohydrate\030\017 \001(\001\022\034\n\024energyDensityAl"
    "cohol\030\020 \001(\001\032Q\n\016NutrientAmount\022\022\n\nnutrien"
    "tId\030\001 \001(\t\022\016\n\006amount\030\002 \001(\001\022\033\n\020unitAbbrevi"
    "ation\030\003 \001(\t:\001g\"/\n\013EntrySource\022\010\n\004USDA\020\000\022"
    "\n\n\006Import\020\001\022\n\n\006Custom\020\002", 623);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "libnutrition/proto/data/single_food.proto", &protobuf_RegisterTypes);
  SingleFoodData::default_instance_ = new SingleFoodData();
  SingleFoodData_NutrientAmount::default_instance_ = new SingleFoodData_NutrientAmount();
  SingleFoodData::default_instance_->InitAsDefaultInstance();
  SingleFoodData_NutrientAmount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto {
  StaticDescriptorInitializer_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto() {
    protobuf_AddDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();
  }
} static_descriptor_initializer_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* SingleFoodData_EntrySource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleFoodData_EntrySource_descriptor_;
}
bool SingleFoodData_EntrySource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SingleFoodData_EntrySource SingleFoodData::USDA;
const SingleFoodData_EntrySource SingleFoodData::Import;
const SingleFoodData_EntrySource SingleFoodData::Custom;
const SingleFoodData_EntrySource SingleFoodData::EntrySource_MIN;
const SingleFoodData_EntrySource SingleFoodData::EntrySource_MAX;
const int SingleFoodData::EntrySource_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string SingleFoodData_NutrientAmount::_default_nutrientid_;
const ::std::string SingleFoodData_NutrientAmount::_default_unitabbreviation_("g");
#ifndef _MSC_VER
const int SingleFoodData_NutrientAmount::kNutrientIdFieldNumber;
const int SingleFoodData_NutrientAmount::kAmountFieldNumber;
const int SingleFoodData_NutrientAmount::kUnitAbbreviationFieldNumber;
#endif  // !_MSC_VER

SingleFoodData_NutrientAmount::SingleFoodData_NutrientAmount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleFoodData_NutrientAmount::InitAsDefaultInstance() {
}

SingleFoodData_NutrientAmount::SingleFoodData_NutrientAmount(const SingleFoodData_NutrientAmount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleFoodData_NutrientAmount::SharedCtor() {
  _cached_size_ = 0;
  nutrientid_ = const_cast< ::std::string*>(&_default_nutrientid_);
  amount_ = 0;
  unitabbreviation_ = const_cast< ::std::string*>(&_default_unitabbreviation_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleFoodData_NutrientAmount::~SingleFoodData_NutrientAmount() {
  SharedDtor();
}

void SingleFoodData_NutrientAmount::SharedDtor() {
  if (nutrientid_ != &_default_nutrientid_) {
    delete nutrientid_;
  }
  if (unitabbreviation_ != &_default_unitabbreviation_) {
    delete unitabbreviation_;
  }
  if (this != default_instance_) {
  }
}

void SingleFoodData_NutrientAmount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleFoodData_NutrientAmount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleFoodData_NutrientAmount_descriptor_;
}

const SingleFoodData_NutrientAmount& SingleFoodData_NutrientAmount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();  return *default_instance_;
}

SingleFoodData_NutrientAmount* SingleFoodData_NutrientAmount::default_instance_ = NULL;

SingleFoodData_NutrientAmount* SingleFoodData_NutrientAmount::New() const {
  return new SingleFoodData_NutrientAmount;
}

void SingleFoodData_NutrientAmount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (nutrientid_ != &_default_nutrientid_) {
        nutrientid_->clear();
      }
    }
    amount_ = 0;
    if (_has_bit(2)) {
      if (unitabbreviation_ != &_default_unitabbreviation_) {
        unitabbreviation_->assign(_default_unitabbreviation_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleFoodData_NutrientAmount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nutrientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nutrientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nutrientid().data(), this->nutrientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_amount;
        break;
      }
      
      // optional double amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unitAbbreviation;
        break;
      }
      
      // optional string unitAbbreviation = 3 [default = "g"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitAbbreviation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitabbreviation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitabbreviation().data(), this->unitabbreviation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleFoodData_NutrientAmount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nutrientId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nutrientid().data(), this->nutrientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nutrientid(), output);
  }
  
  // optional double amount = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->amount(), output);
  }
  
  // optional string unitAbbreviation = 3 [default = "g"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitabbreviation().data(), this->unitabbreviation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->unitabbreviation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleFoodData_NutrientAmount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nutrientId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nutrientid().data(), this->nutrientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nutrientid(), target);
  }
  
  // optional double amount = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->amount(), target);
  }
  
  // optional string unitAbbreviation = 3 [default = "g"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitabbreviation().data(), this->unitabbreviation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->unitabbreviation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleFoodData_NutrientAmount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nutrientId = 1;
    if (has_nutrientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nutrientid());
    }
    
    // optional double amount = 2;
    if (has_amount()) {
      total_size += 1 + 8;
    }
    
    // optional string unitAbbreviation = 3 [default = "g"];
    if (has_unitabbreviation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitabbreviation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleFoodData_NutrientAmount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleFoodData_NutrientAmount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleFoodData_NutrientAmount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleFoodData_NutrientAmount::MergeFrom(const SingleFoodData_NutrientAmount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nutrientid(from.nutrientid());
    }
    if (from._has_bit(1)) {
      set_amount(from.amount());
    }
    if (from._has_bit(2)) {
      set_unitabbreviation(from.unitabbreviation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleFoodData_NutrientAmount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleFoodData_NutrientAmount::CopyFrom(const SingleFoodData_NutrientAmount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleFoodData_NutrientAmount::IsInitialized() const {
  
  return true;
}

void SingleFoodData_NutrientAmount::Swap(SingleFoodData_NutrientAmount* other) {
  if (other != this) {
    std::swap(nutrientid_, other->nutrientid_);
    std::swap(amount_, other->amount_);
    std::swap(unitabbreviation_, other->unitabbreviation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleFoodData_NutrientAmount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleFoodData_NutrientAmount_descriptor_;
  metadata.reflection = SingleFoodData_NutrientAmount_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string SingleFoodData::_default_name_;
const ::std::string SingleFoodData::_default_groupid_;
const ::std::string SingleFoodData::_default_refusedescription_;
#ifndef _MSC_VER
const int SingleFoodData::kIdFieldNumber;
const int SingleFoodData::kNameFieldNumber;
const int SingleFoodData::kOwnerIdFieldNumber;
const int SingleFoodData::kEntrySourceFieldNumber;
const int SingleFoodData::kGroupIdFieldNumber;
const int SingleFoodData::kPercentRefuseFieldNumber;
const int SingleFoodData::kRefuseDescriptionFieldNumber;
const int SingleFoodData::kNutrientAmountsFieldNumber;
const int SingleFoodData::kWeightAmountFieldNumber;
const int SingleFoodData::kVolumeAmountFieldNumber;
const int SingleFoodData::kQuantityAmountFieldNumber;
const int SingleFoodData::kServingAmountFieldNumber;
const int SingleFoodData::kEnergyDensityFatFieldNumber;
const int SingleFoodData::kEnergyDensityProteinFieldNumber;
const int SingleFoodData::kEnergyDensityCarbohydrateFieldNumber;
const int SingleFoodData::kEnergyDensityAlcoholFieldNumber;
#endif  // !_MSC_VER

SingleFoodData::SingleFoodData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleFoodData::InitAsDefaultInstance() {
}

SingleFoodData::SingleFoodData(const SingleFoodData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleFoodData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ownerid_ = 0;
  entrysource_ = 0;
  groupid_ = const_cast< ::std::string*>(&_default_groupid_);
  percentrefuse_ = 0;
  refusedescription_ = const_cast< ::std::string*>(&_default_refusedescription_);
  weightamount_ = 0;
  volumeamount_ = 0;
  quantityamount_ = 0;
  servingamount_ = 0;
  energydensityfat_ = 0;
  energydensityprotein_ = 0;
  energydensitycarbohydrate_ = 0;
  energydensityalcohol_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleFoodData::~SingleFoodData() {
  SharedDtor();
}

void SingleFoodData::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (groupid_ != &_default_groupid_) {
    delete groupid_;
  }
  if (refusedescription_ != &_default_refusedescription_) {
    delete refusedescription_;
  }
  if (this != default_instance_) {
  }
}

void SingleFoodData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleFoodData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleFoodData_descriptor_;
}

const SingleFoodData& SingleFoodData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();  return *default_instance_;
}

SingleFoodData* SingleFoodData::default_instance_ = NULL;

SingleFoodData* SingleFoodData::New() const {
  return new SingleFoodData;
}

void SingleFoodData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    ownerid_ = 0;
    entrysource_ = 0;
    if (_has_bit(4)) {
      if (groupid_ != &_default_groupid_) {
        groupid_->clear();
      }
    }
    percentrefuse_ = 0;
    if (_has_bit(6)) {
      if (refusedescription_ != &_default_refusedescription_) {
        refusedescription_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    weightamount_ = 0;
    volumeamount_ = 0;
    quantityamount_ = 0;
    servingamount_ = 0;
    energydensityfat_ = 0;
    energydensityprotein_ = 0;
    energydensitycarbohydrate_ = 0;
    energydensityalcohol_ = 0;
  }
  nutrientamounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleFoodData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ownerId;
        break;
      }
      
      // optional int32 ownerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_entrySource;
        break;
      }
      
      // optional .SingleFoodData.EntrySource entrySource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entrySource:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleFoodData_EntrySource_IsValid(value)) {
            set_entrysource(static_cast< ::SingleFoodData_EntrySource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_groupId;
        break;
      }
      
      // optional string groupId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_percentRefuse;
        break;
      }
      
      // optional double percentRefuse = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_percentRefuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percentrefuse_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_refuseDescription;
        break;
      }
      
      // optional string refuseDescription = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refuseDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refusedescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refusedescription().data(), this->refusedescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nutrientAmounts;
        break;
      }
      
      // repeated .SingleFoodData.NutrientAmount nutrientAmounts = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nutrientAmounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nutrientamounts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nutrientAmounts;
        if (input->ExpectTag(73)) goto parse_weightAmount;
        break;
      }
      
      // optional double weightAmount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_weightAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weightamount_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_volumeAmount;
        break;
      }
      
      // optional double volumeAmount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_volumeAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volumeamount_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_quantityAmount;
        break;
      }
      
      // optional double quantityAmount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_quantityAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantityamount_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_servingAmount;
        break;
      }
      
      // optional double servingAmount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_servingAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &servingamount_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_energyDensityFat;
        break;
      }
      
      // optional double energyDensityFat = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_energyDensityFat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &energydensityfat_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_energyDensityProtein;
        break;
      }
      
      // optional double energyDensityProtein = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_energyDensityProtein:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &energydensityprotein_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_energyDensityCarbohydrate;
        break;
      }
      
      // optional double energyDensityCarbohydrate = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_energyDensityCarbohydrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &energydensitycarbohydrate_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_energyDensityAlcohol;
        break;
      }
      
      // optional double energyDensityAlcohol = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_energyDensityAlcohol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &energydensityalcohol_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleFoodData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 ownerId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ownerid(), output);
  }
  
  // optional .SingleFoodData.EntrySource entrySource = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->entrysource(), output);
  }
  
  // optional string groupId = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->groupid(), output);
  }
  
  // optional double percentRefuse = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->percentrefuse(), output);
  }
  
  // optional string refuseDescription = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refusedescription().data(), this->refusedescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->refusedescription(), output);
  }
  
  // repeated .SingleFoodData.NutrientAmount nutrientAmounts = 8;
  for (int i = 0; i < this->nutrientamounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->nutrientamounts(i), output);
  }
  
  // optional double weightAmount = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->weightamount(), output);
  }
  
  // optional double volumeAmount = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->volumeamount(), output);
  }
  
  // optional double quantityAmount = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->quantityamount(), output);
  }
  
  // optional double servingAmount = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->servingamount(), output);
  }
  
  // optional double energyDensityFat = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->energydensityfat(), output);
  }
  
  // optional double energyDensityProtein = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->energydensityprotein(), output);
  }
  
  // optional double energyDensityCarbohydrate = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->energydensitycarbohydrate(), output);
  }
  
  // optional double energyDensityAlcohol = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->energydensityalcohol(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleFoodData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 ownerId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ownerid(), target);
  }
  
  // optional .SingleFoodData.EntrySource entrySource = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->entrysource(), target);
  }
  
  // optional string groupId = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->groupid(), target);
  }
  
  // optional double percentRefuse = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->percentrefuse(), target);
  }
  
  // optional string refuseDescription = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refusedescription().data(), this->refusedescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->refusedescription(), target);
  }
  
  // repeated .SingleFoodData.NutrientAmount nutrientAmounts = 8;
  for (int i = 0; i < this->nutrientamounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->nutrientamounts(i), target);
  }
  
  // optional double weightAmount = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->weightamount(), target);
  }
  
  // optional double volumeAmount = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->volumeamount(), target);
  }
  
  // optional double quantityAmount = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->quantityamount(), target);
  }
  
  // optional double servingAmount = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->servingamount(), target);
  }
  
  // optional double energyDensityFat = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->energydensityfat(), target);
  }
  
  // optional double energyDensityProtein = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->energydensityprotein(), target);
  }
  
  // optional double energyDensityCarbohydrate = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->energydensitycarbohydrate(), target);
  }
  
  // optional double energyDensityAlcohol = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->energydensityalcohol(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleFoodData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 ownerId = 3;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }
    
    // optional .SingleFoodData.EntrySource entrySource = 4;
    if (has_entrysource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entrysource());
    }
    
    // optional string groupId = 5;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }
    
    // optional double percentRefuse = 6;
    if (has_percentrefuse()) {
      total_size += 1 + 8;
    }
    
    // optional string refuseDescription = 7;
    if (has_refusedescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refusedescription());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double weightAmount = 9;
    if (has_weightamount()) {
      total_size += 1 + 8;
    }
    
    // optional double volumeAmount = 10;
    if (has_volumeamount()) {
      total_size += 1 + 8;
    }
    
    // optional double quantityAmount = 11;
    if (has_quantityamount()) {
      total_size += 1 + 8;
    }
    
    // optional double servingAmount = 12;
    if (has_servingamount()) {
      total_size += 1 + 8;
    }
    
    // optional double energyDensityFat = 13;
    if (has_energydensityfat()) {
      total_size += 1 + 8;
    }
    
    // optional double energyDensityProtein = 14;
    if (has_energydensityprotein()) {
      total_size += 1 + 8;
    }
    
    // optional double energyDensityCarbohydrate = 15;
    if (has_energydensitycarbohydrate()) {
      total_size += 1 + 8;
    }
    
    // optional double energyDensityAlcohol = 16;
    if (has_energydensityalcohol()) {
      total_size += 2 + 8;
    }
    
  }
  // repeated .SingleFoodData.NutrientAmount nutrientAmounts = 8;
  total_size += 1 * this->nutrientamounts_size();
  for (int i = 0; i < this->nutrientamounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nutrientamounts(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleFoodData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleFoodData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleFoodData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleFoodData::MergeFrom(const SingleFoodData& from) {
  GOOGLE_CHECK_NE(&from, this);
  nutrientamounts_.MergeFrom(from.nutrientamounts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_ownerid(from.ownerid());
    }
    if (from._has_bit(3)) {
      set_entrysource(from.entrysource());
    }
    if (from._has_bit(4)) {
      set_groupid(from.groupid());
    }
    if (from._has_bit(5)) {
      set_percentrefuse(from.percentrefuse());
    }
    if (from._has_bit(6)) {
      set_refusedescription(from.refusedescription());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_weightamount(from.weightamount());
    }
    if (from._has_bit(9)) {
      set_volumeamount(from.volumeamount());
    }
    if (from._has_bit(10)) {
      set_quantityamount(from.quantityamount());
    }
    if (from._has_bit(11)) {
      set_servingamount(from.servingamount());
    }
    if (from._has_bit(12)) {
      set_energydensityfat(from.energydensityfat());
    }
    if (from._has_bit(13)) {
      set_energydensityprotein(from.energydensityprotein());
    }
    if (from._has_bit(14)) {
      set_energydensitycarbohydrate(from.energydensitycarbohydrate());
    }
    if (from._has_bit(15)) {
      set_energydensityalcohol(from.energydensityalcohol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleFoodData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleFoodData::CopyFrom(const SingleFoodData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleFoodData::IsInitialized() const {
  
  return true;
}

void SingleFoodData::Swap(SingleFoodData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(entrysource_, other->entrysource_);
    std::swap(groupid_, other->groupid_);
    std::swap(percentrefuse_, other->percentrefuse_);
    std::swap(refusedescription_, other->refusedescription_);
    nutrientamounts_.Swap(&other->nutrientamounts_);
    std::swap(weightamount_, other->weightamount_);
    std::swap(volumeamount_, other->volumeamount_);
    std::swap(quantityamount_, other->quantityamount_);
    std::swap(servingamount_, other->servingamount_);
    std::swap(energydensityfat_, other->energydensityfat_);
    std::swap(energydensityprotein_, other->energydensityprotein_);
    std::swap(energydensitycarbohydrate_, other->energydensitycarbohydrate_);
    std::swap(energydensityalcohol_, other->energydensityalcohol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleFoodData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleFoodData_descriptor_;
  metadata.reflection = SingleFoodData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
