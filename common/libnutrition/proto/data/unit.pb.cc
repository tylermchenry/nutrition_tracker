// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libnutrition/proto/data/unit.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* UnitData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UnitData_Dimension_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2funit_2eproto() {
  protobuf_AddDesc_libnutrition_2fproto_2fdata_2funit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "libnutrition/proto/data/unit.proto");
  GOOGLE_CHECK(file != NULL);
  UnitData_descriptor_ = file->message_type(0);
  static const int UnitData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, abbreviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, dimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, basicconversionfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, isbasic_),
  };
  UnitData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitData_descriptor_,
      UnitData::default_instance_,
      UnitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitData));
  UnitData_Dimension_descriptor_ = UnitData_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_libnutrition_2fproto_2fdata_2funit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitData_descriptor_, &UnitData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2funit_2eproto() {
  delete UnitData::default_instance_;
  delete UnitData_reflection_;
}

void protobuf_AddDesc_libnutrition_2fproto_2fdata_2funit_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"libnutrition/proto/data/unit.proto\"\332\001\n"
    "\010UnitData\022\024\n\014abbreviation\030\001 \001(\t\022\014\n\004name\030"
    "\002 \001(\t\022&\n\tdimension\030\003 \001(\0162\023.UnitData.Dime"
    "nsion\022\035\n\025basicConversionFactor\030\004 \001(\001\022\017\n\007"
    "isBasic\030\005 \001(\010\"R\n\tDimension\022\n\n\006Weight\020\000\022\n"
    "\n\006Volume\020\001\022\014\n\010Quantity\020\002\022\013\n\007Serving\020\003\022\n\n"
    "\006Energy\020\004\022\006\n\002IU\020\005", 257);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "libnutrition/proto/data/unit.proto", &protobuf_RegisterTypes);
  UnitData::default_instance_ = new UnitData();
  UnitData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2funit_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_libnutrition_2fproto_2fdata_2funit_2eproto {
  StaticDescriptorInitializer_libnutrition_2fproto_2fdata_2funit_2eproto() {
    protobuf_AddDesc_libnutrition_2fproto_2fdata_2funit_2eproto();
  }
} static_descriptor_initializer_libnutrition_2fproto_2fdata_2funit_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* UnitData_Dimension_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitData_Dimension_descriptor_;
}
bool UnitData_Dimension_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UnitData_Dimension UnitData::Weight;
const UnitData_Dimension UnitData::Volume;
const UnitData_Dimension UnitData::Quantity;
const UnitData_Dimension UnitData::Serving;
const UnitData_Dimension UnitData::Energy;
const UnitData_Dimension UnitData::IU;
const UnitData_Dimension UnitData::Dimension_MIN;
const UnitData_Dimension UnitData::Dimension_MAX;
const int UnitData::Dimension_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string UnitData::_default_abbreviation_;
const ::std::string UnitData::_default_name_;
#ifndef _MSC_VER
const int UnitData::kAbbreviationFieldNumber;
const int UnitData::kNameFieldNumber;
const int UnitData::kDimensionFieldNumber;
const int UnitData::kBasicConversionFactorFieldNumber;
const int UnitData::kIsBasicFieldNumber;
#endif  // !_MSC_VER

UnitData::UnitData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitData::InitAsDefaultInstance() {
}

UnitData::UnitData(const UnitData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitData::SharedCtor() {
  _cached_size_ = 0;
  abbreviation_ = const_cast< ::std::string*>(&_default_abbreviation_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  dimension_ = 0;
  basicconversionfactor_ = 0;
  isbasic_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitData::~UnitData() {
  SharedDtor();
}

void UnitData::SharedDtor() {
  if (abbreviation_ != &_default_abbreviation_) {
    delete abbreviation_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UnitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitData_descriptor_;
}

const UnitData& UnitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fdata_2funit_2eproto();  return *default_instance_;
}

UnitData* UnitData::default_instance_ = NULL;

UnitData* UnitData::New() const {
  return new UnitData;
}

void UnitData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (abbreviation_ != &_default_abbreviation_) {
        abbreviation_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    dimension_ = 0;
    basicconversionfactor_ = 0;
    isbasic_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string abbreviation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abbreviation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->abbreviation().data(), this->abbreviation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dimension;
        break;
      }
      
      // optional .UnitData.Dimension dimension = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimension:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UnitData_Dimension_IsValid(value)) {
            set_dimension(static_cast< ::UnitData_Dimension >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_basicConversionFactor;
        break;
      }
      
      // optional double basicConversionFactor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_basicConversionFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &basicconversionfactor_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isBasic;
        break;
      }
      
      // optional bool isBasic = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBasic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbasic_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string abbreviation = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abbreviation().data(), this->abbreviation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->abbreviation(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional .UnitData.Dimension dimension = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dimension(), output);
  }
  
  // optional double basicConversionFactor = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->basicconversionfactor(), output);
  }
  
  // optional bool isBasic = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isbasic(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string abbreviation = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abbreviation().data(), this->abbreviation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->abbreviation(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional .UnitData.Dimension dimension = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dimension(), target);
  }
  
  // optional double basicConversionFactor = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->basicconversionfactor(), target);
  }
  
  // optional bool isBasic = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isbasic(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string abbreviation = 1;
    if (has_abbreviation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abbreviation());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .UnitData.Dimension dimension = 3;
    if (has_dimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dimension());
    }
    
    // optional double basicConversionFactor = 4;
    if (has_basicconversionfactor()) {
      total_size += 1 + 8;
    }
    
    // optional bool isBasic = 5;
    if (has_isbasic()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitData::MergeFrom(const UnitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_abbreviation(from.abbreviation());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_dimension(from.dimension());
    }
    if (from._has_bit(3)) {
      set_basicconversionfactor(from.basicconversionfactor());
    }
    if (from._has_bit(4)) {
      set_isbasic(from.isbasic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitData::CopyFrom(const UnitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitData::IsInitialized() const {
  
  return true;
}

void UnitData::Swap(UnitData* other) {
  if (other != this) {
    std::swap(abbreviation_, other->abbreviation_);
    std::swap(name_, other->name_);
    std::swap(dimension_, other->dimension_);
    std::swap(basicconversionfactor_, other->basicconversionfactor_);
    std::swap(isbasic_, other->isbasic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitData_descriptor_;
  metadata.reflection = UnitData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
