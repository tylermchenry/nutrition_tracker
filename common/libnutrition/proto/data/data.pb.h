// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libnutrition/proto/data/data.proto

#ifndef PROTOBUF_libnutrition_2fproto_2fdata_2fdata_2eproto__INCLUDED
#define PROTOBUF_libnutrition_2fproto_2fdata_2fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "libnutrition/proto/data/single_food.pb.h"
#include "libnutrition/proto/data/composite_food.pb.h"
#include "libnutrition/proto/data/template.pb.h"
#include "libnutrition/proto/data/meal.pb.h"
#include "libnutrition/proto/data/nutrient.pb.h"
#include "libnutrition/proto/data/unit.pb.h"
#include "libnutrition/proto/data/specialized_unit.pb.h"
#include "libnutrition/proto/data/group.pb.h"
#include "libnutrition/proto/data/user.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fdata_2eproto();
void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fdata_2eproto();
void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fdata_2eproto();

class FoodData;

// ===================================================================

class FoodData : public ::google::protobuf::Message {
 public:
  FoodData();
  virtual ~FoodData();
  
  FoodData(const FoodData& from);
  
  inline FoodData& operator=(const FoodData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FoodData& default_instance();
  
  void Swap(FoodData* other);
  
  // implements Message ----------------------------------------------
  
  FoodData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FoodData& from);
  void MergeFrom(const FoodData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .SingleFoodData singleFoods = 1;
  inline bool has_singlefoods() const;
  inline void clear_singlefoods();
  static const int kSingleFoodsFieldNumber = 1;
  inline const ::SingleFoodData& singlefoods() const;
  inline ::SingleFoodData* mutable_singlefoods();
  
  // optional .CompositeFoodData compositeFoods = 2;
  inline bool has_compositefoods() const;
  inline void clear_compositefoods();
  static const int kCompositeFoodsFieldNumber = 2;
  inline const ::CompositeFoodData& compositefoods() const;
  inline ::CompositeFoodData* mutable_compositefoods();
  
  // optional .TemplateData templates = 3;
  inline bool has_templates() const;
  inline void clear_templates();
  static const int kTemplatesFieldNumber = 3;
  inline const ::TemplateData& templates() const;
  inline ::TemplateData* mutable_templates();
  
  // optional .MealData meals = 4;
  inline bool has_meals() const;
  inline void clear_meals();
  static const int kMealsFieldNumber = 4;
  inline const ::MealData& meals() const;
  inline ::MealData* mutable_meals();
  
  // @@protoc_insertion_point(class_scope:FoodData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SingleFoodData* singlefoods_;
  ::CompositeFoodData* compositefoods_;
  ::TemplateData* templates_;
  ::MealData* meals_;
  friend void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fdata_2eproto();
  friend void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fdata_2eproto();
  friend void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fdata_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FoodData* default_instance_;
};
// ===================================================================


// ===================================================================

// FoodData

// optional .SingleFoodData singleFoods = 1;
inline bool FoodData::has_singlefoods() const {
  return _has_bit(0);
}
inline void FoodData::clear_singlefoods() {
  if (singlefoods_ != NULL) singlefoods_->::SingleFoodData::Clear();
  _clear_bit(0);
}
inline const ::SingleFoodData& FoodData::singlefoods() const {
  return singlefoods_ != NULL ? *singlefoods_ : *default_instance_->singlefoods_;
}
inline ::SingleFoodData* FoodData::mutable_singlefoods() {
  _set_bit(0);
  if (singlefoods_ == NULL) singlefoods_ = new ::SingleFoodData;
  return singlefoods_;
}

// optional .CompositeFoodData compositeFoods = 2;
inline bool FoodData::has_compositefoods() const {
  return _has_bit(1);
}
inline void FoodData::clear_compositefoods() {
  if (compositefoods_ != NULL) compositefoods_->::CompositeFoodData::Clear();
  _clear_bit(1);
}
inline const ::CompositeFoodData& FoodData::compositefoods() const {
  return compositefoods_ != NULL ? *compositefoods_ : *default_instance_->compositefoods_;
}
inline ::CompositeFoodData* FoodData::mutable_compositefoods() {
  _set_bit(1);
  if (compositefoods_ == NULL) compositefoods_ = new ::CompositeFoodData;
  return compositefoods_;
}

// optional .TemplateData templates = 3;
inline bool FoodData::has_templates() const {
  return _has_bit(2);
}
inline void FoodData::clear_templates() {
  if (templates_ != NULL) templates_->::TemplateData::Clear();
  _clear_bit(2);
}
inline const ::TemplateData& FoodData::templates() const {
  return templates_ != NULL ? *templates_ : *default_instance_->templates_;
}
inline ::TemplateData* FoodData::mutable_templates() {
  _set_bit(2);
  if (templates_ == NULL) templates_ = new ::TemplateData;
  return templates_;
}

// optional .MealData meals = 4;
inline bool FoodData::has_meals() const {
  return _has_bit(3);
}
inline void FoodData::clear_meals() {
  if (meals_ != NULL) meals_->::MealData::Clear();
  _clear_bit(3);
}
inline const ::MealData& FoodData::meals() const {
  return meals_ != NULL ? *meals_ : *default_instance_->meals_;
}
inline ::MealData* FoodData::mutable_meals() {
  _set_bit(3);
  if (meals_ == NULL) meals_ = new ::MealData;
  return meals_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_libnutrition_2fproto_2fdata_2fdata_2eproto__INCLUDED
