// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libnutrition/proto/data/meal.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MealIdentifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MealIdentifier_reflection_ = NULL;
const ::google::protobuf::Descriptor* MealData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MealData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fmeal_2eproto() {
  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fmeal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "libnutrition/proto/data/meal.proto");
  GOOGLE_CHECK(file != NULL);
  MealIdentifier_descriptor_ = file->message_type(0);
  static const int MealIdentifier_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MealIdentifier, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MealIdentifier, date_iso8601_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MealIdentifier, mealid_),
  };
  MealIdentifier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MealIdentifier_descriptor_,
      MealIdentifier::default_instance_,
      MealIdentifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MealIdentifier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MealIdentifier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MealIdentifier));
  MealData_descriptor_ = file->message_type(1);
  static const int MealData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MealData, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MealData, date_iso8601_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MealData, mealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MealData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MealData, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MealData, components_),
  };
  MealData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MealData_descriptor_,
      MealData::default_instance_,
      MealData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MealData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MealData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MealData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fmeal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MealIdentifier_descriptor_, &MealIdentifier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MealData_descriptor_, &MealData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fmeal_2eproto() {
  delete MealIdentifier::default_instance_;
  delete MealIdentifier_reflection_;
  delete MealData::default_instance_;
  delete MealData_reflection_;
}

void protobuf_AddDesc_libnutrition_2fproto_2fdata_2fmeal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_libnutrition_2fproto_2fdata_2ffood_5fcomponent_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"libnutrition/proto/data/meal.proto\032,li"
    "bnutrition/proto/data/food_component.pro"
    "to\"F\n\016MealIdentifier\022\016\n\006userId\030\001 \001(\005\022\024\n\014"
    "date_ISO8601\030\002 \001(\t\022\016\n\006mealId\030\003 \001(\005\"\211\001\n\010M"
    "ealData\022\016\n\006userId\030\001 \001(\005\022\024\n\014date_ISO8601\030"
    "\002 \001(\t\022\016\n\006mealId\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\022\021\n\tc"
    "reatorId\030\005 \001(\005\022&\n\ncomponents\030\006 \003(\0132\022.Foo"
    "dComponentData", 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "libnutrition/proto/data/meal.proto", &protobuf_RegisterTypes);
  MealIdentifier::default_instance_ = new MealIdentifier();
  MealData::default_instance_ = new MealData();
  MealIdentifier::default_instance_->InitAsDefaultInstance();
  MealData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fmeal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_libnutrition_2fproto_2fdata_2fmeal_2eproto {
  StaticDescriptorInitializer_libnutrition_2fproto_2fdata_2fmeal_2eproto() {
    protobuf_AddDesc_libnutrition_2fproto_2fdata_2fmeal_2eproto();
  }
} static_descriptor_initializer_libnutrition_2fproto_2fdata_2fmeal_2eproto_;


// ===================================================================

const ::std::string MealIdentifier::_default_date_iso8601_;
#ifndef _MSC_VER
const int MealIdentifier::kUserIdFieldNumber;
const int MealIdentifier::kDateISO8601FieldNumber;
const int MealIdentifier::kMealIdFieldNumber;
#endif  // !_MSC_VER

MealIdentifier::MealIdentifier()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MealIdentifier::InitAsDefaultInstance() {
}

MealIdentifier::MealIdentifier(const MealIdentifier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MealIdentifier::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  date_iso8601_ = const_cast< ::std::string*>(&_default_date_iso8601_);
  mealid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MealIdentifier::~MealIdentifier() {
  SharedDtor();
}

void MealIdentifier::SharedDtor() {
  if (date_iso8601_ != &_default_date_iso8601_) {
    delete date_iso8601_;
  }
  if (this != default_instance_) {
  }
}

void MealIdentifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MealIdentifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MealIdentifier_descriptor_;
}

const MealIdentifier& MealIdentifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fdata_2fmeal_2eproto();  return *default_instance_;
}

MealIdentifier* MealIdentifier::default_instance_ = NULL;

MealIdentifier* MealIdentifier::New() const {
  return new MealIdentifier;
}

void MealIdentifier::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (_has_bit(1)) {
      if (date_iso8601_ != &_default_date_iso8601_) {
        date_iso8601_->clear();
      }
    }
    mealid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MealIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_date_ISO8601;
        break;
      }
      
      // optional string date_ISO8601 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_ISO8601:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_iso8601()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date_iso8601().data(), this->date_iso8601().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mealId;
        break;
      }
      
      // optional int32 mealId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mealId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mealid_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MealIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }
  
  // optional string date_ISO8601 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_iso8601().data(), this->date_iso8601().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->date_iso8601(), output);
  }
  
  // optional int32 mealId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mealid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MealIdentifier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }
  
  // optional string date_ISO8601 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_iso8601().data(), this->date_iso8601().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date_iso8601(), target);
  }
  
  // optional int32 mealId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mealid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MealIdentifier::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional string date_ISO8601 = 2;
    if (has_date_iso8601()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_iso8601());
    }
    
    // optional int32 mealId = 3;
    if (has_mealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mealid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MealIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MealIdentifier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MealIdentifier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MealIdentifier::MergeFrom(const MealIdentifier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_date_iso8601(from.date_iso8601());
    }
    if (from._has_bit(2)) {
      set_mealid(from.mealid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MealIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MealIdentifier::CopyFrom(const MealIdentifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MealIdentifier::IsInitialized() const {
  
  return true;
}

void MealIdentifier::Swap(MealIdentifier* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(date_iso8601_, other->date_iso8601_);
    std::swap(mealid_, other->mealid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MealIdentifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MealIdentifier_descriptor_;
  metadata.reflection = MealIdentifier_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MealData::_default_date_iso8601_;
const ::std::string MealData::_default_name_;
#ifndef _MSC_VER
const int MealData::kUserIdFieldNumber;
const int MealData::kDateISO8601FieldNumber;
const int MealData::kMealIdFieldNumber;
const int MealData::kNameFieldNumber;
const int MealData::kCreatorIdFieldNumber;
const int MealData::kComponentsFieldNumber;
#endif  // !_MSC_VER

MealData::MealData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MealData::InitAsDefaultInstance() {
}

MealData::MealData(const MealData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MealData::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  date_iso8601_ = const_cast< ::std::string*>(&_default_date_iso8601_);
  mealid_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  creatorid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MealData::~MealData() {
  SharedDtor();
}

void MealData::SharedDtor() {
  if (date_iso8601_ != &_default_date_iso8601_) {
    delete date_iso8601_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MealData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MealData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MealData_descriptor_;
}

const MealData& MealData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fdata_2fmeal_2eproto();  return *default_instance_;
}

MealData* MealData::default_instance_ = NULL;

MealData* MealData::New() const {
  return new MealData;
}

void MealData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (_has_bit(1)) {
      if (date_iso8601_ != &_default_date_iso8601_) {
        date_iso8601_->clear();
      }
    }
    mealid_ = 0;
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    creatorid_ = 0;
  }
  components_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MealData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_date_ISO8601;
        break;
      }
      
      // optional string date_ISO8601 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_ISO8601:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_iso8601()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date_iso8601().data(), this->date_iso8601().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mealId;
        break;
      }
      
      // optional int32 mealId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mealId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mealid_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_creatorId;
        break;
      }
      
      // optional int32 creatorId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creatorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_components;
        break;
      }
      
      // repeated .FoodComponentData components = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_components()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_components;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MealData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }
  
  // optional string date_ISO8601 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_iso8601().data(), this->date_iso8601().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->date_iso8601(), output);
  }
  
  // optional int32 mealId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mealid(), output);
  }
  
  // optional string name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional int32 creatorId = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->creatorid(), output);
  }
  
  // repeated .FoodComponentData components = 6;
  for (int i = 0; i < this->components_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->components(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MealData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }
  
  // optional string date_ISO8601 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_iso8601().data(), this->date_iso8601().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date_iso8601(), target);
  }
  
  // optional int32 mealId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mealid(), target);
  }
  
  // optional string name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional int32 creatorId = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->creatorid(), target);
  }
  
  // repeated .FoodComponentData components = 6;
  for (int i = 0; i < this->components_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->components(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MealData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional string date_ISO8601 = 2;
    if (has_date_iso8601()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_iso8601());
    }
    
    // optional int32 mealId = 3;
    if (has_mealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mealid());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 creatorId = 5;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }
    
  }
  // repeated .FoodComponentData components = 6;
  total_size += 1 * this->components_size();
  for (int i = 0; i < this->components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->components(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MealData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MealData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MealData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MealData::MergeFrom(const MealData& from) {
  GOOGLE_CHECK_NE(&from, this);
  components_.MergeFrom(from.components_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_date_iso8601(from.date_iso8601());
    }
    if (from._has_bit(2)) {
      set_mealid(from.mealid());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
    if (from._has_bit(4)) {
      set_creatorid(from.creatorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MealData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MealData::CopyFrom(const MealData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MealData::IsInitialized() const {
  
  return true;
}

void MealData::Swap(MealData* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(date_iso8601_, other->date_iso8601_);
    std::swap(mealid_, other->mealid_);
    std::swap(name_, other->name_);
    std::swap(creatorid_, other->creatorid_);
    components_.Swap(&other->components_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MealData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MealData_descriptor_;
  metadata.reflection = MealData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
