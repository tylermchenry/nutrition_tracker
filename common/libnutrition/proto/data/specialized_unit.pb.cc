// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libnutrition/proto/data/specialized_unit.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SpecializedUnitIdentifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecializedUnitIdentifier_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecializedUnitData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecializedUnitData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto() {
  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "libnutrition/proto/data/specialized_unit.proto");
  GOOGLE_CHECK(file != NULL);
  SpecializedUnitIdentifier_descriptor_ = file->message_type(0);
  static const int SpecializedUnitIdentifier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecializedUnitIdentifier, singlefoodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecializedUnitIdentifier, sequence_),
  };
  SpecializedUnitIdentifier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecializedUnitIdentifier_descriptor_,
      SpecializedUnitIdentifier::default_instance_,
      SpecializedUnitIdentifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecializedUnitIdentifier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecializedUnitIdentifier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecializedUnitIdentifier));
  SpecializedUnitData_descriptor_ = file->message_type(1);
  static const int SpecializedUnitData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecializedUnitData, foodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecializedUnitData, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecializedUnitData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecializedUnitData, amountingrams_),
  };
  SpecializedUnitData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecializedUnitData_descriptor_,
      SpecializedUnitData::default_instance_,
      SpecializedUnitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecializedUnitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecializedUnitData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecializedUnitData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecializedUnitIdentifier_descriptor_, &SpecializedUnitIdentifier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecializedUnitData_descriptor_, &SpecializedUnitData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto() {
  delete SpecializedUnitIdentifier::default_instance_;
  delete SpecializedUnitIdentifier_reflection_;
  delete SpecializedUnitData::default_instance_;
  delete SpecializedUnitData_reflection_;
}

void protobuf_AddDesc_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.libnutrition/proto/data/specialized_un"
    "it.proto\"C\n\031SpecializedUnitIdentifier\022\024\n"
    "\014singleFoodId\030\001 \002(\005\022\020\n\010sequence\030\002 \002(\005\"\\\n"
    "\023SpecializedUnitData\022\016\n\006foodId\030\001 \002(\005\022\020\n\010"
    "sequence\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\025\n\ramountIn"
    "Grams\030\004 \001(\001", 211);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "libnutrition/proto/data/specialized_unit.proto", &protobuf_RegisterTypes);
  SpecializedUnitIdentifier::default_instance_ = new SpecializedUnitIdentifier();
  SpecializedUnitData::default_instance_ = new SpecializedUnitData();
  SpecializedUnitIdentifier::default_instance_->InitAsDefaultInstance();
  SpecializedUnitData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto {
  StaticDescriptorInitializer_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto() {
    protobuf_AddDesc_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto();
  }
} static_descriptor_initializer_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SpecializedUnitIdentifier::kSingleFoodIdFieldNumber;
const int SpecializedUnitIdentifier::kSequenceFieldNumber;
#endif  // !_MSC_VER

SpecializedUnitIdentifier::SpecializedUnitIdentifier()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpecializedUnitIdentifier::InitAsDefaultInstance() {
}

SpecializedUnitIdentifier::SpecializedUnitIdentifier(const SpecializedUnitIdentifier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpecializedUnitIdentifier::SharedCtor() {
  _cached_size_ = 0;
  singlefoodid_ = 0;
  sequence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecializedUnitIdentifier::~SpecializedUnitIdentifier() {
  SharedDtor();
}

void SpecializedUnitIdentifier::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecializedUnitIdentifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecializedUnitIdentifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecializedUnitIdentifier_descriptor_;
}

const SpecializedUnitIdentifier& SpecializedUnitIdentifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto();  return *default_instance_;
}

SpecializedUnitIdentifier* SpecializedUnitIdentifier::default_instance_ = NULL;

SpecializedUnitIdentifier* SpecializedUnitIdentifier::New() const {
  return new SpecializedUnitIdentifier;
}

void SpecializedUnitIdentifier::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    singlefoodid_ = 0;
    sequence_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecializedUnitIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 singleFoodId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &singlefoodid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }
      
      // required int32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpecializedUnitIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 singleFoodId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->singlefoodid(), output);
  }
  
  // required int32 sequence = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sequence(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpecializedUnitIdentifier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 singleFoodId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->singlefoodid(), target);
  }
  
  // required int32 sequence = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sequence(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpecializedUnitIdentifier::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 singleFoodId = 1;
    if (has_singlefoodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->singlefoodid());
    }
    
    // required int32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecializedUnitIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecializedUnitIdentifier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecializedUnitIdentifier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecializedUnitIdentifier::MergeFrom(const SpecializedUnitIdentifier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_singlefoodid(from.singlefoodid());
    }
    if (from._has_bit(1)) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecializedUnitIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecializedUnitIdentifier::CopyFrom(const SpecializedUnitIdentifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecializedUnitIdentifier::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SpecializedUnitIdentifier::Swap(SpecializedUnitIdentifier* other) {
  if (other != this) {
    std::swap(singlefoodid_, other->singlefoodid_);
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecializedUnitIdentifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecializedUnitIdentifier_descriptor_;
  metadata.reflection = SpecializedUnitIdentifier_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SpecializedUnitData::_default_name_;
#ifndef _MSC_VER
const int SpecializedUnitData::kFoodIdFieldNumber;
const int SpecializedUnitData::kSequenceFieldNumber;
const int SpecializedUnitData::kNameFieldNumber;
const int SpecializedUnitData::kAmountInGramsFieldNumber;
#endif  // !_MSC_VER

SpecializedUnitData::SpecializedUnitData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpecializedUnitData::InitAsDefaultInstance() {
}

SpecializedUnitData::SpecializedUnitData(const SpecializedUnitData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpecializedUnitData::SharedCtor() {
  _cached_size_ = 0;
  foodid_ = 0;
  sequence_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  amountingrams_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecializedUnitData::~SpecializedUnitData() {
  SharedDtor();
}

void SpecializedUnitData::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SpecializedUnitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecializedUnitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecializedUnitData_descriptor_;
}

const SpecializedUnitData& SpecializedUnitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto();  return *default_instance_;
}

SpecializedUnitData* SpecializedUnitData::default_instance_ = NULL;

SpecializedUnitData* SpecializedUnitData::New() const {
  return new SpecializedUnitData;
}

void SpecializedUnitData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    foodid_ = 0;
    sequence_ = 0;
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    amountingrams_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecializedUnitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 foodId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &foodid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }
      
      // optional int32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_amountInGrams;
        break;
      }
      
      // optional double amountInGrams = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_amountInGrams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amountingrams_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpecializedUnitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 foodId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->foodid(), output);
  }
  
  // optional int32 sequence = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sequence(), output);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional double amountInGrams = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->amountingrams(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpecializedUnitData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 foodId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->foodid(), target);
  }
  
  // optional int32 sequence = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sequence(), target);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional double amountInGrams = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->amountingrams(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpecializedUnitData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 foodId = 1;
    if (has_foodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->foodid());
    }
    
    // optional int32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional double amountInGrams = 4;
    if (has_amountingrams()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecializedUnitData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecializedUnitData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecializedUnitData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecializedUnitData::MergeFrom(const SpecializedUnitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_foodid(from.foodid());
    }
    if (from._has_bit(1)) {
      set_sequence(from.sequence());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_amountingrams(from.amountingrams());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecializedUnitData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecializedUnitData::CopyFrom(const SpecializedUnitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecializedUnitData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SpecializedUnitData::Swap(SpecializedUnitData* other) {
  if (other != this) {
    std::swap(foodid_, other->foodid_);
    std::swap(sequence_, other->sequence_);
    std::swap(name_, other->name_);
    std::swap(amountingrams_, other->amountingrams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecializedUnitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecializedUnitData_descriptor_;
  metadata.reflection = SpecializedUnitData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
