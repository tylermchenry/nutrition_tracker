// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libnutrition/proto/data/composite_food.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CompositeFoodData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompositeFoodData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto() {
  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "libnutrition/proto/data/composite_food.proto");
  GOOGLE_CHECK(file != NULL);
  CompositeFoodData_descriptor_ = file->message_type(0);
  static const int CompositeFoodData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeFoodData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeFoodData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeFoodData, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeFoodData, weightamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeFoodData, volumeamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeFoodData, quantityamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeFoodData, servingamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeFoodData, creationdate_iso8601_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeFoodData, expirydate_iso8601_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeFoodData, isnonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeFoodData, components_),
  };
  CompositeFoodData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompositeFoodData_descriptor_,
      CompositeFoodData::default_instance_,
      CompositeFoodData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeFoodData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeFoodData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompositeFoodData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompositeFoodData_descriptor_, &CompositeFoodData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto() {
  delete CompositeFoodData::default_instance_;
  delete CompositeFoodData_reflection_;
}

void protobuf_AddDesc_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_libnutrition_2fproto_2fdata_2ffood_5fcomponent_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n,libnutrition/proto/data/composite_food"
    ".proto\032,libnutrition/proto/data/food_com"
    "ponent.proto\"\223\002\n\021CompositeFoodData\022\n\n\002id"
    "\030\001 \002(\005\022\014\n\004name\030\002 \001(\t\022\017\n\007ownerId\030\003 \001(\005\022\024\n"
    "\014weightAmount\030\004 \001(\001\022\024\n\014volumeAmount\030\005 \001("
    "\001\022\026\n\016quantityAmount\030\006 \001(\001\022\025\n\rservingAmou"
    "nt\030\007 \001(\001\022\034\n\024creationDate_ISO8601\030\010 \001(\t\022\032"
    "\n\022expiryDate_ISO8601\030\t \001(\t\022\026\n\007isNonce\030\n "
    "\001(\010:\005false\022&\n\ncomponents\030\013 \003(\0132\022.FoodCom"
    "ponentData", 370);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "libnutrition/proto/data/composite_food.proto", &protobuf_RegisterTypes);
  CompositeFoodData::default_instance_ = new CompositeFoodData();
  CompositeFoodData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto {
  StaticDescriptorInitializer_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto() {
    protobuf_AddDesc_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto();
  }
} static_descriptor_initializer_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto_;


// ===================================================================

const ::std::string CompositeFoodData::_default_name_;
const ::std::string CompositeFoodData::_default_creationdate_iso8601_;
const ::std::string CompositeFoodData::_default_expirydate_iso8601_;
#ifndef _MSC_VER
const int CompositeFoodData::kIdFieldNumber;
const int CompositeFoodData::kNameFieldNumber;
const int CompositeFoodData::kOwnerIdFieldNumber;
const int CompositeFoodData::kWeightAmountFieldNumber;
const int CompositeFoodData::kVolumeAmountFieldNumber;
const int CompositeFoodData::kQuantityAmountFieldNumber;
const int CompositeFoodData::kServingAmountFieldNumber;
const int CompositeFoodData::kCreationDateISO8601FieldNumber;
const int CompositeFoodData::kExpiryDateISO8601FieldNumber;
const int CompositeFoodData::kIsNonceFieldNumber;
const int CompositeFoodData::kComponentsFieldNumber;
#endif  // !_MSC_VER

CompositeFoodData::CompositeFoodData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompositeFoodData::InitAsDefaultInstance() {
}

CompositeFoodData::CompositeFoodData(const CompositeFoodData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompositeFoodData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ownerid_ = 0;
  weightamount_ = 0;
  volumeamount_ = 0;
  quantityamount_ = 0;
  servingamount_ = 0;
  creationdate_iso8601_ = const_cast< ::std::string*>(&_default_creationdate_iso8601_);
  expirydate_iso8601_ = const_cast< ::std::string*>(&_default_expirydate_iso8601_);
  isnonce_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompositeFoodData::~CompositeFoodData() {
  SharedDtor();
}

void CompositeFoodData::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (creationdate_iso8601_ != &_default_creationdate_iso8601_) {
    delete creationdate_iso8601_;
  }
  if (expirydate_iso8601_ != &_default_expirydate_iso8601_) {
    delete expirydate_iso8601_;
  }
  if (this != default_instance_) {
  }
}

void CompositeFoodData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompositeFoodData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompositeFoodData_descriptor_;
}

const CompositeFoodData& CompositeFoodData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto();  return *default_instance_;
}

CompositeFoodData* CompositeFoodData::default_instance_ = NULL;

CompositeFoodData* CompositeFoodData::New() const {
  return new CompositeFoodData;
}

void CompositeFoodData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    ownerid_ = 0;
    weightamount_ = 0;
    volumeamount_ = 0;
    quantityamount_ = 0;
    servingamount_ = 0;
    if (_has_bit(7)) {
      if (creationdate_iso8601_ != &_default_creationdate_iso8601_) {
        creationdate_iso8601_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (expirydate_iso8601_ != &_default_expirydate_iso8601_) {
        expirydate_iso8601_->clear();
      }
    }
    isnonce_ = false;
  }
  components_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompositeFoodData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ownerId;
        break;
      }
      
      // optional int32 ownerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_weightAmount;
        break;
      }
      
      // optional double weightAmount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_weightAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weightamount_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_volumeAmount;
        break;
      }
      
      // optional double volumeAmount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_volumeAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volumeamount_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_quantityAmount;
        break;
      }
      
      // optional double quantityAmount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_quantityAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantityamount_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_servingAmount;
        break;
      }
      
      // optional double servingAmount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_servingAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &servingamount_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_creationDate_ISO8601;
        break;
      }
      
      // optional string creationDate_ISO8601 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creationDate_ISO8601:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creationdate_iso8601()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creationdate_iso8601().data(), this->creationdate_iso8601().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_expiryDate_ISO8601;
        break;
      }
      
      // optional string expiryDate_ISO8601 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expiryDate_ISO8601:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expirydate_iso8601()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->expirydate_iso8601().data(), this->expirydate_iso8601().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isNonce;
        break;
      }
      
      // optional bool isNonce = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnonce_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_components;
        break;
      }
      
      // repeated .FoodComponentData components = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_components()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_components;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompositeFoodData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 ownerId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ownerid(), output);
  }
  
  // optional double weightAmount = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->weightamount(), output);
  }
  
  // optional double volumeAmount = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->volumeamount(), output);
  }
  
  // optional double quantityAmount = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->quantityamount(), output);
  }
  
  // optional double servingAmount = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->servingamount(), output);
  }
  
  // optional string creationDate_ISO8601 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creationdate_iso8601().data(), this->creationdate_iso8601().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->creationdate_iso8601(), output);
  }
  
  // optional string expiryDate_ISO8601 = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expirydate_iso8601().data(), this->expirydate_iso8601().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->expirydate_iso8601(), output);
  }
  
  // optional bool isNonce = 10 [default = false];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isnonce(), output);
  }
  
  // repeated .FoodComponentData components = 11;
  for (int i = 0; i < this->components_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->components(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompositeFoodData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 ownerId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ownerid(), target);
  }
  
  // optional double weightAmount = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->weightamount(), target);
  }
  
  // optional double volumeAmount = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->volumeamount(), target);
  }
  
  // optional double quantityAmount = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->quantityamount(), target);
  }
  
  // optional double servingAmount = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->servingamount(), target);
  }
  
  // optional string creationDate_ISO8601 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creationdate_iso8601().data(), this->creationdate_iso8601().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->creationdate_iso8601(), target);
  }
  
  // optional string expiryDate_ISO8601 = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expirydate_iso8601().data(), this->expirydate_iso8601().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->expirydate_iso8601(), target);
  }
  
  // optional bool isNonce = 10 [default = false];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isnonce(), target);
  }
  
  // repeated .FoodComponentData components = 11;
  for (int i = 0; i < this->components_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->components(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompositeFoodData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 ownerId = 3;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }
    
    // optional double weightAmount = 4;
    if (has_weightamount()) {
      total_size += 1 + 8;
    }
    
    // optional double volumeAmount = 5;
    if (has_volumeamount()) {
      total_size += 1 + 8;
    }
    
    // optional double quantityAmount = 6;
    if (has_quantityamount()) {
      total_size += 1 + 8;
    }
    
    // optional double servingAmount = 7;
    if (has_servingamount()) {
      total_size += 1 + 8;
    }
    
    // optional string creationDate_ISO8601 = 8;
    if (has_creationdate_iso8601()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creationdate_iso8601());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string expiryDate_ISO8601 = 9;
    if (has_expirydate_iso8601()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expirydate_iso8601());
    }
    
    // optional bool isNonce = 10 [default = false];
    if (has_isnonce()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .FoodComponentData components = 11;
  total_size += 1 * this->components_size();
  for (int i = 0; i < this->components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->components(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompositeFoodData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompositeFoodData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompositeFoodData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompositeFoodData::MergeFrom(const CompositeFoodData& from) {
  GOOGLE_CHECK_NE(&from, this);
  components_.MergeFrom(from.components_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_ownerid(from.ownerid());
    }
    if (from._has_bit(3)) {
      set_weightamount(from.weightamount());
    }
    if (from._has_bit(4)) {
      set_volumeamount(from.volumeamount());
    }
    if (from._has_bit(5)) {
      set_quantityamount(from.quantityamount());
    }
    if (from._has_bit(6)) {
      set_servingamount(from.servingamount());
    }
    if (from._has_bit(7)) {
      set_creationdate_iso8601(from.creationdate_iso8601());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_expirydate_iso8601(from.expirydate_iso8601());
    }
    if (from._has_bit(9)) {
      set_isnonce(from.isnonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompositeFoodData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompositeFoodData::CopyFrom(const CompositeFoodData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositeFoodData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < components_size(); i++) {
    if (!this->components(i).IsInitialized()) return false;
  }
  return true;
}

void CompositeFoodData::Swap(CompositeFoodData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(weightamount_, other->weightamount_);
    std::swap(volumeamount_, other->volumeamount_);
    std::swap(quantityamount_, other->quantityamount_);
    std::swap(servingamount_, other->servingamount_);
    std::swap(creationdate_iso8601_, other->creationdate_iso8601_);
    std::swap(expirydate_iso8601_, other->expirydate_iso8601_);
    std::swap(isnonce_, other->isnonce_);
    components_.Swap(&other->components_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompositeFoodData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompositeFoodData_descriptor_;
  metadata.reflection = CompositeFoodData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
