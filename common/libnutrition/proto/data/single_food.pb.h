// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libnutrition/proto/data/single_food.proto

#ifndef PROTOBUF_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto__INCLUDED
#define PROTOBUF_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();
void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();
void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();

class SingleFoodData;
class SingleFoodData_NutrientAmount;

enum SingleFoodData_EntrySource {
  SingleFoodData_EntrySource_USDA = 0,
  SingleFoodData_EntrySource_Import = 1,
  SingleFoodData_EntrySource_Custom = 2
};
bool SingleFoodData_EntrySource_IsValid(int value);
const SingleFoodData_EntrySource SingleFoodData_EntrySource_EntrySource_MIN = SingleFoodData_EntrySource_USDA;
const SingleFoodData_EntrySource SingleFoodData_EntrySource_EntrySource_MAX = SingleFoodData_EntrySource_Custom;
const int SingleFoodData_EntrySource_EntrySource_ARRAYSIZE = SingleFoodData_EntrySource_EntrySource_MAX + 1;

const ::google::protobuf::EnumDescriptor* SingleFoodData_EntrySource_descriptor();
inline const ::std::string& SingleFoodData_EntrySource_Name(SingleFoodData_EntrySource value) {
  return ::google::protobuf::internal::NameOfEnum(
    SingleFoodData_EntrySource_descriptor(), value);
}
inline bool SingleFoodData_EntrySource_Parse(
    const ::std::string& name, SingleFoodData_EntrySource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SingleFoodData_EntrySource>(
    SingleFoodData_EntrySource_descriptor(), name, value);
}
// ===================================================================

class SingleFoodData_NutrientAmount : public ::google::protobuf::Message {
 public:
  SingleFoodData_NutrientAmount();
  virtual ~SingleFoodData_NutrientAmount();
  
  SingleFoodData_NutrientAmount(const SingleFoodData_NutrientAmount& from);
  
  inline SingleFoodData_NutrientAmount& operator=(const SingleFoodData_NutrientAmount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleFoodData_NutrientAmount& default_instance();
  
  void Swap(SingleFoodData_NutrientAmount* other);
  
  // implements Message ----------------------------------------------
  
  SingleFoodData_NutrientAmount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleFoodData_NutrientAmount& from);
  void MergeFrom(const SingleFoodData_NutrientAmount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string nutrientId = 1;
  inline bool has_nutrientid() const;
  inline void clear_nutrientid();
  static const int kNutrientIdFieldNumber = 1;
  inline const ::std::string& nutrientid() const;
  inline void set_nutrientid(const ::std::string& value);
  inline void set_nutrientid(const char* value);
  inline void set_nutrientid(const char* value, size_t size);
  inline ::std::string* mutable_nutrientid();
  
  // optional double amount = 2;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 2;
  inline double amount() const;
  inline void set_amount(double value);
  
  // optional string unitAbbreviation = 3 [default = "g"];
  inline bool has_unitabbreviation() const;
  inline void clear_unitabbreviation();
  static const int kUnitAbbreviationFieldNumber = 3;
  inline const ::std::string& unitabbreviation() const;
  inline void set_unitabbreviation(const ::std::string& value);
  inline void set_unitabbreviation(const char* value);
  inline void set_unitabbreviation(const char* value, size_t size);
  inline ::std::string* mutable_unitabbreviation();
  
  // @@protoc_insertion_point(class_scope:SingleFoodData.NutrientAmount)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* nutrientid_;
  static const ::std::string _default_nutrientid_;
  double amount_;
  ::std::string* unitabbreviation_;
  static const ::std::string _default_unitabbreviation_;
  friend void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();
  friend void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();
  friend void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SingleFoodData_NutrientAmount* default_instance_;
};
// -------------------------------------------------------------------

class SingleFoodData : public ::google::protobuf::Message {
 public:
  SingleFoodData();
  virtual ~SingleFoodData();
  
  SingleFoodData(const SingleFoodData& from);
  
  inline SingleFoodData& operator=(const SingleFoodData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleFoodData& default_instance();
  
  void Swap(SingleFoodData* other);
  
  // implements Message ----------------------------------------------
  
  SingleFoodData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleFoodData& from);
  void MergeFrom(const SingleFoodData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SingleFoodData_NutrientAmount NutrientAmount;
  
  typedef SingleFoodData_EntrySource EntrySource;
  static const EntrySource USDA = SingleFoodData_EntrySource_USDA;
  static const EntrySource Import = SingleFoodData_EntrySource_Import;
  static const EntrySource Custom = SingleFoodData_EntrySource_Custom;
  static inline bool EntrySource_IsValid(int value) {
    return SingleFoodData_EntrySource_IsValid(value);
  }
  static const EntrySource EntrySource_MIN =
    SingleFoodData_EntrySource_EntrySource_MIN;
  static const EntrySource EntrySource_MAX =
    SingleFoodData_EntrySource_EntrySource_MAX;
  static const int EntrySource_ARRAYSIZE =
    SingleFoodData_EntrySource_EntrySource_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EntrySource_descriptor() {
    return SingleFoodData_EntrySource_descriptor();
  }
  static inline const ::std::string& EntrySource_Name(EntrySource value) {
    return SingleFoodData_EntrySource_Name(value);
  }
  static inline bool EntrySource_Parse(const ::std::string& name,
      EntrySource* value) {
    return SingleFoodData_EntrySource_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 ownerId = 3;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwnerIdFieldNumber = 3;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);
  
  // optional .SingleFoodData.EntrySource entrySource = 4;
  inline bool has_entrysource() const;
  inline void clear_entrysource();
  static const int kEntrySourceFieldNumber = 4;
  inline ::SingleFoodData_EntrySource entrysource() const;
  inline void set_entrysource(::SingleFoodData_EntrySource value);
  
  // optional string groupId = 5;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 5;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  
  // optional double percentRefuse = 6;
  inline bool has_percentrefuse() const;
  inline void clear_percentrefuse();
  static const int kPercentRefuseFieldNumber = 6;
  inline double percentrefuse() const;
  inline void set_percentrefuse(double value);
  
  // optional string refuseDescription = 7;
  inline bool has_refusedescription() const;
  inline void clear_refusedescription();
  static const int kRefuseDescriptionFieldNumber = 7;
  inline const ::std::string& refusedescription() const;
  inline void set_refusedescription(const ::std::string& value);
  inline void set_refusedescription(const char* value);
  inline void set_refusedescription(const char* value, size_t size);
  inline ::std::string* mutable_refusedescription();
  
  // repeated .SingleFoodData.NutrientAmount nutrientAmounts = 8;
  inline int nutrientamounts_size() const;
  inline void clear_nutrientamounts();
  static const int kNutrientAmountsFieldNumber = 8;
  inline const ::SingleFoodData_NutrientAmount& nutrientamounts(int index) const;
  inline ::SingleFoodData_NutrientAmount* mutable_nutrientamounts(int index);
  inline ::SingleFoodData_NutrientAmount* add_nutrientamounts();
  inline const ::google::protobuf::RepeatedPtrField< ::SingleFoodData_NutrientAmount >&
      nutrientamounts() const;
  inline ::google::protobuf::RepeatedPtrField< ::SingleFoodData_NutrientAmount >*
      mutable_nutrientamounts();
  
  // optional double weightAmount = 9;
  inline bool has_weightamount() const;
  inline void clear_weightamount();
  static const int kWeightAmountFieldNumber = 9;
  inline double weightamount() const;
  inline void set_weightamount(double value);
  
  // optional double volumeAmount = 10;
  inline bool has_volumeamount() const;
  inline void clear_volumeamount();
  static const int kVolumeAmountFieldNumber = 10;
  inline double volumeamount() const;
  inline void set_volumeamount(double value);
  
  // optional double quantityAmount = 11;
  inline bool has_quantityamount() const;
  inline void clear_quantityamount();
  static const int kQuantityAmountFieldNumber = 11;
  inline double quantityamount() const;
  inline void set_quantityamount(double value);
  
  // optional double servingAmount = 12;
  inline bool has_servingamount() const;
  inline void clear_servingamount();
  static const int kServingAmountFieldNumber = 12;
  inline double servingamount() const;
  inline void set_servingamount(double value);
  
  // optional double energyDensityFat = 13;
  inline bool has_energydensityfat() const;
  inline void clear_energydensityfat();
  static const int kEnergyDensityFatFieldNumber = 13;
  inline double energydensityfat() const;
  inline void set_energydensityfat(double value);
  
  // optional double energyDensityProtein = 14;
  inline bool has_energydensityprotein() const;
  inline void clear_energydensityprotein();
  static const int kEnergyDensityProteinFieldNumber = 14;
  inline double energydensityprotein() const;
  inline void set_energydensityprotein(double value);
  
  // optional double energyDensityCarbohydrate = 15;
  inline bool has_energydensitycarbohydrate() const;
  inline void clear_energydensitycarbohydrate();
  static const int kEnergyDensityCarbohydrateFieldNumber = 15;
  inline double energydensitycarbohydrate() const;
  inline void set_energydensitycarbohydrate(double value);
  
  // optional double energyDensityAlcohol = 16;
  inline bool has_energydensityalcohol() const;
  inline void clear_energydensityalcohol();
  static const int kEnergyDensityAlcoholFieldNumber = 16;
  inline double energydensityalcohol() const;
  inline void set_energydensityalcohol(double value);
  
  // @@protoc_insertion_point(class_scope:SingleFoodData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 ownerid_;
  int entrysource_;
  ::std::string* groupid_;
  static const ::std::string _default_groupid_;
  double percentrefuse_;
  ::std::string* refusedescription_;
  static const ::std::string _default_refusedescription_;
  ::google::protobuf::RepeatedPtrField< ::SingleFoodData_NutrientAmount > nutrientamounts_;
  double weightamount_;
  double volumeamount_;
  double quantityamount_;
  double servingamount_;
  double energydensityfat_;
  double energydensityprotein_;
  double energydensitycarbohydrate_;
  double energydensityalcohol_;
  friend void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();
  friend void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();
  friend void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SingleFoodData* default_instance_;
};
// ===================================================================


// ===================================================================

// SingleFoodData_NutrientAmount

// optional string nutrientId = 1;
inline bool SingleFoodData_NutrientAmount::has_nutrientid() const {
  return _has_bit(0);
}
inline void SingleFoodData_NutrientAmount::clear_nutrientid() {
  if (nutrientid_ != &_default_nutrientid_) {
    nutrientid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SingleFoodData_NutrientAmount::nutrientid() const {
  return *nutrientid_;
}
inline void SingleFoodData_NutrientAmount::set_nutrientid(const ::std::string& value) {
  _set_bit(0);
  if (nutrientid_ == &_default_nutrientid_) {
    nutrientid_ = new ::std::string;
  }
  nutrientid_->assign(value);
}
inline void SingleFoodData_NutrientAmount::set_nutrientid(const char* value) {
  _set_bit(0);
  if (nutrientid_ == &_default_nutrientid_) {
    nutrientid_ = new ::std::string;
  }
  nutrientid_->assign(value);
}
inline void SingleFoodData_NutrientAmount::set_nutrientid(const char* value, size_t size) {
  _set_bit(0);
  if (nutrientid_ == &_default_nutrientid_) {
    nutrientid_ = new ::std::string;
  }
  nutrientid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleFoodData_NutrientAmount::mutable_nutrientid() {
  _set_bit(0);
  if (nutrientid_ == &_default_nutrientid_) {
    nutrientid_ = new ::std::string;
  }
  return nutrientid_;
}

// optional double amount = 2;
inline bool SingleFoodData_NutrientAmount::has_amount() const {
  return _has_bit(1);
}
inline void SingleFoodData_NutrientAmount::clear_amount() {
  amount_ = 0;
  _clear_bit(1);
}
inline double SingleFoodData_NutrientAmount::amount() const {
  return amount_;
}
inline void SingleFoodData_NutrientAmount::set_amount(double value) {
  _set_bit(1);
  amount_ = value;
}

// optional string unitAbbreviation = 3 [default = "g"];
inline bool SingleFoodData_NutrientAmount::has_unitabbreviation() const {
  return _has_bit(2);
}
inline void SingleFoodData_NutrientAmount::clear_unitabbreviation() {
  if (unitabbreviation_ != &_default_unitabbreviation_) {
    unitabbreviation_->assign(_default_unitabbreviation_);
  }
  _clear_bit(2);
}
inline const ::std::string& SingleFoodData_NutrientAmount::unitabbreviation() const {
  return *unitabbreviation_;
}
inline void SingleFoodData_NutrientAmount::set_unitabbreviation(const ::std::string& value) {
  _set_bit(2);
  if (unitabbreviation_ == &_default_unitabbreviation_) {
    unitabbreviation_ = new ::std::string;
  }
  unitabbreviation_->assign(value);
}
inline void SingleFoodData_NutrientAmount::set_unitabbreviation(const char* value) {
  _set_bit(2);
  if (unitabbreviation_ == &_default_unitabbreviation_) {
    unitabbreviation_ = new ::std::string;
  }
  unitabbreviation_->assign(value);
}
inline void SingleFoodData_NutrientAmount::set_unitabbreviation(const char* value, size_t size) {
  _set_bit(2);
  if (unitabbreviation_ == &_default_unitabbreviation_) {
    unitabbreviation_ = new ::std::string;
  }
  unitabbreviation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleFoodData_NutrientAmount::mutable_unitabbreviation() {
  _set_bit(2);
  if (unitabbreviation_ == &_default_unitabbreviation_) {
    unitabbreviation_ = new ::std::string(_default_unitabbreviation_);
  }
  return unitabbreviation_;
}

// -------------------------------------------------------------------

// SingleFoodData

// optional int32 id = 1;
inline bool SingleFoodData::has_id() const {
  return _has_bit(0);
}
inline void SingleFoodData::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SingleFoodData::id() const {
  return id_;
}
inline void SingleFoodData::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// optional string name = 2;
inline bool SingleFoodData::has_name() const {
  return _has_bit(1);
}
inline void SingleFoodData::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SingleFoodData::name() const {
  return *name_;
}
inline void SingleFoodData::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SingleFoodData::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SingleFoodData::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleFoodData::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 ownerId = 3;
inline bool SingleFoodData::has_ownerid() const {
  return _has_bit(2);
}
inline void SingleFoodData::clear_ownerid() {
  ownerid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 SingleFoodData::ownerid() const {
  return ownerid_;
}
inline void SingleFoodData::set_ownerid(::google::protobuf::int32 value) {
  _set_bit(2);
  ownerid_ = value;
}

// optional .SingleFoodData.EntrySource entrySource = 4;
inline bool SingleFoodData::has_entrysource() const {
  return _has_bit(3);
}
inline void SingleFoodData::clear_entrysource() {
  entrysource_ = 0;
  _clear_bit(3);
}
inline ::SingleFoodData_EntrySource SingleFoodData::entrysource() const {
  return static_cast< ::SingleFoodData_EntrySource >(entrysource_);
}
inline void SingleFoodData::set_entrysource(::SingleFoodData_EntrySource value) {
  GOOGLE_DCHECK(::SingleFoodData_EntrySource_IsValid(value));
  _set_bit(3);
  entrysource_ = value;
}

// optional string groupId = 5;
inline bool SingleFoodData::has_groupid() const {
  return _has_bit(4);
}
inline void SingleFoodData::clear_groupid() {
  if (groupid_ != &_default_groupid_) {
    groupid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& SingleFoodData::groupid() const {
  return *groupid_;
}
inline void SingleFoodData::set_groupid(const ::std::string& value) {
  _set_bit(4);
  if (groupid_ == &_default_groupid_) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void SingleFoodData::set_groupid(const char* value) {
  _set_bit(4);
  if (groupid_ == &_default_groupid_) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void SingleFoodData::set_groupid(const char* value, size_t size) {
  _set_bit(4);
  if (groupid_ == &_default_groupid_) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleFoodData::mutable_groupid() {
  _set_bit(4);
  if (groupid_ == &_default_groupid_) {
    groupid_ = new ::std::string;
  }
  return groupid_;
}

// optional double percentRefuse = 6;
inline bool SingleFoodData::has_percentrefuse() const {
  return _has_bit(5);
}
inline void SingleFoodData::clear_percentrefuse() {
  percentrefuse_ = 0;
  _clear_bit(5);
}
inline double SingleFoodData::percentrefuse() const {
  return percentrefuse_;
}
inline void SingleFoodData::set_percentrefuse(double value) {
  _set_bit(5);
  percentrefuse_ = value;
}

// optional string refuseDescription = 7;
inline bool SingleFoodData::has_refusedescription() const {
  return _has_bit(6);
}
inline void SingleFoodData::clear_refusedescription() {
  if (refusedescription_ != &_default_refusedescription_) {
    refusedescription_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& SingleFoodData::refusedescription() const {
  return *refusedescription_;
}
inline void SingleFoodData::set_refusedescription(const ::std::string& value) {
  _set_bit(6);
  if (refusedescription_ == &_default_refusedescription_) {
    refusedescription_ = new ::std::string;
  }
  refusedescription_->assign(value);
}
inline void SingleFoodData::set_refusedescription(const char* value) {
  _set_bit(6);
  if (refusedescription_ == &_default_refusedescription_) {
    refusedescription_ = new ::std::string;
  }
  refusedescription_->assign(value);
}
inline void SingleFoodData::set_refusedescription(const char* value, size_t size) {
  _set_bit(6);
  if (refusedescription_ == &_default_refusedescription_) {
    refusedescription_ = new ::std::string;
  }
  refusedescription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleFoodData::mutable_refusedescription() {
  _set_bit(6);
  if (refusedescription_ == &_default_refusedescription_) {
    refusedescription_ = new ::std::string;
  }
  return refusedescription_;
}

// repeated .SingleFoodData.NutrientAmount nutrientAmounts = 8;
inline int SingleFoodData::nutrientamounts_size() const {
  return nutrientamounts_.size();
}
inline void SingleFoodData::clear_nutrientamounts() {
  nutrientamounts_.Clear();
}
inline const ::SingleFoodData_NutrientAmount& SingleFoodData::nutrientamounts(int index) const {
  return nutrientamounts_.Get(index);
}
inline ::SingleFoodData_NutrientAmount* SingleFoodData::mutable_nutrientamounts(int index) {
  return nutrientamounts_.Mutable(index);
}
inline ::SingleFoodData_NutrientAmount* SingleFoodData::add_nutrientamounts() {
  return nutrientamounts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SingleFoodData_NutrientAmount >&
SingleFoodData::nutrientamounts() const {
  return nutrientamounts_;
}
inline ::google::protobuf::RepeatedPtrField< ::SingleFoodData_NutrientAmount >*
SingleFoodData::mutable_nutrientamounts() {
  return &nutrientamounts_;
}

// optional double weightAmount = 9;
inline bool SingleFoodData::has_weightamount() const {
  return _has_bit(8);
}
inline void SingleFoodData::clear_weightamount() {
  weightamount_ = 0;
  _clear_bit(8);
}
inline double SingleFoodData::weightamount() const {
  return weightamount_;
}
inline void SingleFoodData::set_weightamount(double value) {
  _set_bit(8);
  weightamount_ = value;
}

// optional double volumeAmount = 10;
inline bool SingleFoodData::has_volumeamount() const {
  return _has_bit(9);
}
inline void SingleFoodData::clear_volumeamount() {
  volumeamount_ = 0;
  _clear_bit(9);
}
inline double SingleFoodData::volumeamount() const {
  return volumeamount_;
}
inline void SingleFoodData::set_volumeamount(double value) {
  _set_bit(9);
  volumeamount_ = value;
}

// optional double quantityAmount = 11;
inline bool SingleFoodData::has_quantityamount() const {
  return _has_bit(10);
}
inline void SingleFoodData::clear_quantityamount() {
  quantityamount_ = 0;
  _clear_bit(10);
}
inline double SingleFoodData::quantityamount() const {
  return quantityamount_;
}
inline void SingleFoodData::set_quantityamount(double value) {
  _set_bit(10);
  quantityamount_ = value;
}

// optional double servingAmount = 12;
inline bool SingleFoodData::has_servingamount() const {
  return _has_bit(11);
}
inline void SingleFoodData::clear_servingamount() {
  servingamount_ = 0;
  _clear_bit(11);
}
inline double SingleFoodData::servingamount() const {
  return servingamount_;
}
inline void SingleFoodData::set_servingamount(double value) {
  _set_bit(11);
  servingamount_ = value;
}

// optional double energyDensityFat = 13;
inline bool SingleFoodData::has_energydensityfat() const {
  return _has_bit(12);
}
inline void SingleFoodData::clear_energydensityfat() {
  energydensityfat_ = 0;
  _clear_bit(12);
}
inline double SingleFoodData::energydensityfat() const {
  return energydensityfat_;
}
inline void SingleFoodData::set_energydensityfat(double value) {
  _set_bit(12);
  energydensityfat_ = value;
}

// optional double energyDensityProtein = 14;
inline bool SingleFoodData::has_energydensityprotein() const {
  return _has_bit(13);
}
inline void SingleFoodData::clear_energydensityprotein() {
  energydensityprotein_ = 0;
  _clear_bit(13);
}
inline double SingleFoodData::energydensityprotein() const {
  return energydensityprotein_;
}
inline void SingleFoodData::set_energydensityprotein(double value) {
  _set_bit(13);
  energydensityprotein_ = value;
}

// optional double energyDensityCarbohydrate = 15;
inline bool SingleFoodData::has_energydensitycarbohydrate() const {
  return _has_bit(14);
}
inline void SingleFoodData::clear_energydensitycarbohydrate() {
  energydensitycarbohydrate_ = 0;
  _clear_bit(14);
}
inline double SingleFoodData::energydensitycarbohydrate() const {
  return energydensitycarbohydrate_;
}
inline void SingleFoodData::set_energydensitycarbohydrate(double value) {
  _set_bit(14);
  energydensitycarbohydrate_ = value;
}

// optional double energyDensityAlcohol = 16;
inline bool SingleFoodData::has_energydensityalcohol() const {
  return _has_bit(15);
}
inline void SingleFoodData::clear_energydensityalcohol() {
  energydensityalcohol_ = 0;
  _clear_bit(15);
}
inline double SingleFoodData::energydensityalcohol() const {
  return energydensityalcohol_;
}
inline void SingleFoodData::set_energydensityalcohol(double value) {
  _set_bit(15);
  energydensityalcohol_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SingleFoodData_EntrySource>() {
  return ::SingleFoodData_EntrySource_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto__INCLUDED
