// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libnutrition/proto/data/specialized_unit.proto

#ifndef PROTOBUF_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto__INCLUDED
#define PROTOBUF_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto();
void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto();
void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto();

class SpecializedUnitIdentifier;
class SpecializedUnitData;

// ===================================================================

class SpecializedUnitIdentifier : public ::google::protobuf::Message {
 public:
  SpecializedUnitIdentifier();
  virtual ~SpecializedUnitIdentifier();
  
  SpecializedUnitIdentifier(const SpecializedUnitIdentifier& from);
  
  inline SpecializedUnitIdentifier& operator=(const SpecializedUnitIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecializedUnitIdentifier& default_instance();
  
  void Swap(SpecializedUnitIdentifier* other);
  
  // implements Message ----------------------------------------------
  
  SpecializedUnitIdentifier* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecializedUnitIdentifier& from);
  void MergeFrom(const SpecializedUnitIdentifier& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 singleFoodId = 1;
  inline bool has_singlefoodid() const;
  inline void clear_singlefoodid();
  static const int kSingleFoodIdFieldNumber = 1;
  inline ::google::protobuf::int32 singlefoodid() const;
  inline void set_singlefoodid(::google::protobuf::int32 value);
  
  // optional int32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::int32 sequence() const;
  inline void set_sequence(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SpecializedUnitIdentifier)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 singlefoodid_;
  ::google::protobuf::int32 sequence_;
  friend void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto();
  friend void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto();
  friend void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SpecializedUnitIdentifier* default_instance_;
};
// -------------------------------------------------------------------

class SpecializedUnitData : public ::google::protobuf::Message {
 public:
  SpecializedUnitData();
  virtual ~SpecializedUnitData();
  
  SpecializedUnitData(const SpecializedUnitData& from);
  
  inline SpecializedUnitData& operator=(const SpecializedUnitData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecializedUnitData& default_instance();
  
  void Swap(SpecializedUnitData* other);
  
  // implements Message ----------------------------------------------
  
  SpecializedUnitData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecializedUnitData& from);
  void MergeFrom(const SpecializedUnitData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 foodId = 1;
  inline bool has_foodid() const;
  inline void clear_foodid();
  static const int kFoodIdFieldNumber = 1;
  inline ::google::protobuf::int32 foodid() const;
  inline void set_foodid(::google::protobuf::int32 value);
  
  // optional int32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::int32 sequence() const;
  inline void set_sequence(::google::protobuf::int32 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional double amountInGrams = 4;
  inline bool has_amountingrams() const;
  inline void clear_amountingrams();
  static const int kAmountInGramsFieldNumber = 4;
  inline double amountingrams() const;
  inline void set_amountingrams(double value);
  
  // @@protoc_insertion_point(class_scope:SpecializedUnitData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 foodid_;
  ::google::protobuf::int32 sequence_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  double amountingrams_;
  friend void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto();
  friend void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto();
  friend void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SpecializedUnitData* default_instance_;
};
// ===================================================================


// ===================================================================

// SpecializedUnitIdentifier

// optional int32 singleFoodId = 1;
inline bool SpecializedUnitIdentifier::has_singlefoodid() const {
  return _has_bit(0);
}
inline void SpecializedUnitIdentifier::clear_singlefoodid() {
  singlefoodid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SpecializedUnitIdentifier::singlefoodid() const {
  return singlefoodid_;
}
inline void SpecializedUnitIdentifier::set_singlefoodid(::google::protobuf::int32 value) {
  _set_bit(0);
  singlefoodid_ = value;
}

// optional int32 sequence = 2;
inline bool SpecializedUnitIdentifier::has_sequence() const {
  return _has_bit(1);
}
inline void SpecializedUnitIdentifier::clear_sequence() {
  sequence_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SpecializedUnitIdentifier::sequence() const {
  return sequence_;
}
inline void SpecializedUnitIdentifier::set_sequence(::google::protobuf::int32 value) {
  _set_bit(1);
  sequence_ = value;
}

// -------------------------------------------------------------------

// SpecializedUnitData

// optional int32 foodId = 1;
inline bool SpecializedUnitData::has_foodid() const {
  return _has_bit(0);
}
inline void SpecializedUnitData::clear_foodid() {
  foodid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SpecializedUnitData::foodid() const {
  return foodid_;
}
inline void SpecializedUnitData::set_foodid(::google::protobuf::int32 value) {
  _set_bit(0);
  foodid_ = value;
}

// optional int32 sequence = 2;
inline bool SpecializedUnitData::has_sequence() const {
  return _has_bit(1);
}
inline void SpecializedUnitData::clear_sequence() {
  sequence_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SpecializedUnitData::sequence() const {
  return sequence_;
}
inline void SpecializedUnitData::set_sequence(::google::protobuf::int32 value) {
  _set_bit(1);
  sequence_ = value;
}

// optional string name = 3;
inline bool SpecializedUnitData::has_name() const {
  return _has_bit(2);
}
inline void SpecializedUnitData::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& SpecializedUnitData::name() const {
  return *name_;
}
inline void SpecializedUnitData::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SpecializedUnitData::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SpecializedUnitData::set_name(const char* value, size_t size) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpecializedUnitData::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional double amountInGrams = 4;
inline bool SpecializedUnitData::has_amountingrams() const {
  return _has_bit(3);
}
inline void SpecializedUnitData::clear_amountingrams() {
  amountingrams_ = 0;
  _clear_bit(3);
}
inline double SpecializedUnitData::amountingrams() const {
  return amountingrams_;
}
inline void SpecializedUnitData::set_amountingrams(double value) {
  _set_bit(3);
  amountingrams_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto__INCLUDED
