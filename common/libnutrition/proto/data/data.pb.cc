// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libnutrition/proto/data/data.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FoodData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FoodData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fdata_2eproto() {
  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "libnutrition/proto/data/data.proto");
  GOOGLE_CHECK(file != NULL);
  FoodData_descriptor_ = file->message_type(0);
  static const int FoodData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodData, singlefoods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodData, compositefoods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodData, templates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodData, meals_),
  };
  FoodData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FoodData_descriptor_,
      FoodData::default_instance_,
      FoodData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FoodData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FoodData_descriptor_, &FoodData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fdata_2eproto() {
  delete FoodData::default_instance_;
  delete FoodData_reflection_;
}

void protobuf_AddDesc_libnutrition_2fproto_2fdata_2fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_libnutrition_2fproto_2fdata_2fsingle_5ffood_2eproto();
  ::protobuf_AddDesc_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto();
  ::protobuf_AddDesc_libnutrition_2fproto_2fdata_2ftemplate_2eproto();
  ::protobuf_AddDesc_libnutrition_2fproto_2fdata_2fmeal_2eproto();
  ::protobuf_AddDesc_libnutrition_2fproto_2fdata_2fnutrient_2eproto();
  ::protobuf_AddDesc_libnutrition_2fproto_2fdata_2funit_2eproto();
  ::protobuf_AddDesc_libnutrition_2fproto_2fdata_2fspecialized_5funit_2eproto();
  ::protobuf_AddDesc_libnutrition_2fproto_2fdata_2fgroup_2eproto();
  ::protobuf_AddDesc_libnutrition_2fproto_2fdata_2fuser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"libnutrition/proto/data/data.proto\032)li"
    "bnutrition/proto/data/single_food.proto\032"
    ",libnutrition/proto/data/composite_food."
    "proto\032&libnutrition/proto/data/template."
    "proto\032\"libnutrition/proto/data/meal.prot"
    "o\032&libnutrition/proto/data/nutrient.prot"
    "o\032\"libnutrition/proto/data/unit.proto\032.l"
    "ibnutrition/proto/data/specialized_unit."
    "proto\032#libnutrition/proto/data/group.pro"
    "to\032\"libnutrition/proto/data/user.proto\"\230"
    "\001\n\010FoodData\022$\n\013singleFoods\030\001 \001(\0132\017.Singl"
    "eFoodData\022*\n\016compositeFoods\030\002 \001(\0132\022.Comp"
    "ositeFoodData\022 \n\ttemplates\030\003 \001(\0132\r.Templ"
    "ateData\022\030\n\005meals\030\004 \001(\0132\t.MealData", 553);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "libnutrition/proto/data/data.proto", &protobuf_RegisterTypes);
  FoodData::default_instance_ = new FoodData();
  FoodData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_libnutrition_2fproto_2fdata_2fdata_2eproto {
  StaticDescriptorInitializer_libnutrition_2fproto_2fdata_2fdata_2eproto() {
    protobuf_AddDesc_libnutrition_2fproto_2fdata_2fdata_2eproto();
  }
} static_descriptor_initializer_libnutrition_2fproto_2fdata_2fdata_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FoodData::kSingleFoodsFieldNumber;
const int FoodData::kCompositeFoodsFieldNumber;
const int FoodData::kTemplatesFieldNumber;
const int FoodData::kMealsFieldNumber;
#endif  // !_MSC_VER

FoodData::FoodData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FoodData::InitAsDefaultInstance() {
  singlefoods_ = const_cast< ::SingleFoodData*>(&::SingleFoodData::default_instance());
  compositefoods_ = const_cast< ::CompositeFoodData*>(&::CompositeFoodData::default_instance());
  templates_ = const_cast< ::TemplateData*>(&::TemplateData::default_instance());
  meals_ = const_cast< ::MealData*>(&::MealData::default_instance());
}

FoodData::FoodData(const FoodData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FoodData::SharedCtor() {
  _cached_size_ = 0;
  singlefoods_ = NULL;
  compositefoods_ = NULL;
  templates_ = NULL;
  meals_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FoodData::~FoodData() {
  SharedDtor();
}

void FoodData::SharedDtor() {
  if (this != default_instance_) {
    delete singlefoods_;
    delete compositefoods_;
    delete templates_;
    delete meals_;
  }
}

void FoodData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoodData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoodData_descriptor_;
}

const FoodData& FoodData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libnutrition_2fproto_2fdata_2fdata_2eproto();  return *default_instance_;
}

FoodData* FoodData::default_instance_ = NULL;

FoodData* FoodData::New() const {
  return new FoodData;
}

void FoodData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (singlefoods_ != NULL) singlefoods_->::SingleFoodData::Clear();
    }
    if (_has_bit(1)) {
      if (compositefoods_ != NULL) compositefoods_->::CompositeFoodData::Clear();
    }
    if (_has_bit(2)) {
      if (templates_ != NULL) templates_->::TemplateData::Clear();
    }
    if (_has_bit(3)) {
      if (meals_ != NULL) meals_->::MealData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FoodData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SingleFoodData singleFoods = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_singlefoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_compositeFoods;
        break;
      }
      
      // optional .CompositeFoodData compositeFoods = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compositeFoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compositefoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_templates;
        break;
      }
      
      // optional .TemplateData templates = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_templates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_templates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_meals;
        break;
      }
      
      // optional .MealData meals = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FoodData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SingleFoodData singleFoods = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->singlefoods(), output);
  }
  
  // optional .CompositeFoodData compositeFoods = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->compositefoods(), output);
  }
  
  // optional .TemplateData templates = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->templates(), output);
  }
  
  // optional .MealData meals = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->meals(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FoodData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SingleFoodData singleFoods = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->singlefoods(), target);
  }
  
  // optional .CompositeFoodData compositeFoods = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->compositefoods(), target);
  }
  
  // optional .TemplateData templates = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->templates(), target);
  }
  
  // optional .MealData meals = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->meals(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FoodData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SingleFoodData singleFoods = 1;
    if (has_singlefoods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singlefoods());
    }
    
    // optional .CompositeFoodData compositeFoods = 2;
    if (has_compositefoods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compositefoods());
    }
    
    // optional .TemplateData templates = 3;
    if (has_templates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->templates());
    }
    
    // optional .MealData meals = 4;
    if (has_meals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meals());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoodData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FoodData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FoodData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FoodData::MergeFrom(const FoodData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_singlefoods()->::SingleFoodData::MergeFrom(from.singlefoods());
    }
    if (from._has_bit(1)) {
      mutable_compositefoods()->::CompositeFoodData::MergeFrom(from.compositefoods());
    }
    if (from._has_bit(2)) {
      mutable_templates()->::TemplateData::MergeFrom(from.templates());
    }
    if (from._has_bit(3)) {
      mutable_meals()->::MealData::MergeFrom(from.meals());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FoodData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodData::CopyFrom(const FoodData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodData::IsInitialized() const {
  
  return true;
}

void FoodData::Swap(FoodData* other) {
  if (other != this) {
    std::swap(singlefoods_, other->singlefoods_);
    std::swap(compositefoods_, other->compositefoods_);
    std::swap(templates_, other->templates_);
    std::swap(meals_, other->meals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FoodData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FoodData_descriptor_;
  metadata.reflection = FoodData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
