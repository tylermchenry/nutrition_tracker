// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libnutrition/proto/data/meal.proto

#ifndef PROTOBUF_libnutrition_2fproto_2fdata_2fmeal_2eproto__INCLUDED
#define PROTOBUF_libnutrition_2fproto_2fdata_2fmeal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "libnutrition/proto/data/food_component.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fmeal_2eproto();
void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fmeal_2eproto();
void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fmeal_2eproto();

class MealIdentifier;
class MealData;

// ===================================================================

class MealIdentifier : public ::google::protobuf::Message {
 public:
  MealIdentifier();
  virtual ~MealIdentifier();
  
  MealIdentifier(const MealIdentifier& from);
  
  inline MealIdentifier& operator=(const MealIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MealIdentifier& default_instance();
  
  void Swap(MealIdentifier* other);
  
  // implements Message ----------------------------------------------
  
  MealIdentifier* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MealIdentifier& from);
  void MergeFrom(const MealIdentifier& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);
  
  // optional string date_ISO8601 = 2;
  inline bool has_date_iso8601() const;
  inline void clear_date_iso8601();
  static const int kDateISO8601FieldNumber = 2;
  inline const ::std::string& date_iso8601() const;
  inline void set_date_iso8601(const ::std::string& value);
  inline void set_date_iso8601(const char* value);
  inline void set_date_iso8601(const char* value, size_t size);
  inline ::std::string* mutable_date_iso8601();
  
  // optional int32 mealId = 3;
  inline bool has_mealid() const;
  inline void clear_mealid();
  static const int kMealIdFieldNumber = 3;
  inline ::google::protobuf::int32 mealid() const;
  inline void set_mealid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:MealIdentifier)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 userid_;
  ::std::string* date_iso8601_;
  static const ::std::string _default_date_iso8601_;
  ::google::protobuf::int32 mealid_;
  friend void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fmeal_2eproto();
  friend void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fmeal_2eproto();
  friend void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fmeal_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MealIdentifier* default_instance_;
};
// -------------------------------------------------------------------

class MealData : public ::google::protobuf::Message {
 public:
  MealData();
  virtual ~MealData();
  
  MealData(const MealData& from);
  
  inline MealData& operator=(const MealData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MealData& default_instance();
  
  void Swap(MealData* other);
  
  // implements Message ----------------------------------------------
  
  MealData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MealData& from);
  void MergeFrom(const MealData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);
  
  // optional string date_ISO8601 = 2;
  inline bool has_date_iso8601() const;
  inline void clear_date_iso8601();
  static const int kDateISO8601FieldNumber = 2;
  inline const ::std::string& date_iso8601() const;
  inline void set_date_iso8601(const ::std::string& value);
  inline void set_date_iso8601(const char* value);
  inline void set_date_iso8601(const char* value, size_t size);
  inline ::std::string* mutable_date_iso8601();
  
  // optional int32 mealId = 3;
  inline bool has_mealid() const;
  inline void clear_mealid();
  static const int kMealIdFieldNumber = 3;
  inline ::google::protobuf::int32 mealid() const;
  inline void set_mealid(::google::protobuf::int32 value);
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 creatorId = 5;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIdFieldNumber = 5;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);
  
  // repeated .FoodComponentData components = 6;
  inline int components_size() const;
  inline void clear_components();
  static const int kComponentsFieldNumber = 6;
  inline const ::FoodComponentData& components(int index) const;
  inline ::FoodComponentData* mutable_components(int index);
  inline ::FoodComponentData* add_components();
  inline const ::google::protobuf::RepeatedPtrField< ::FoodComponentData >&
      components() const;
  inline ::google::protobuf::RepeatedPtrField< ::FoodComponentData >*
      mutable_components();
  
  // @@protoc_insertion_point(class_scope:MealData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 userid_;
  ::std::string* date_iso8601_;
  static const ::std::string _default_date_iso8601_;
  ::google::protobuf::int32 mealid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::RepeatedPtrField< ::FoodComponentData > components_;
  friend void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fmeal_2eproto();
  friend void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fmeal_2eproto();
  friend void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fmeal_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MealData* default_instance_;
};
// ===================================================================


// ===================================================================

// MealIdentifier

// optional int32 userId = 1;
inline bool MealIdentifier::has_userid() const {
  return _has_bit(0);
}
inline void MealIdentifier::clear_userid() {
  userid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 MealIdentifier::userid() const {
  return userid_;
}
inline void MealIdentifier::set_userid(::google::protobuf::int32 value) {
  _set_bit(0);
  userid_ = value;
}

// optional string date_ISO8601 = 2;
inline bool MealIdentifier::has_date_iso8601() const {
  return _has_bit(1);
}
inline void MealIdentifier::clear_date_iso8601() {
  if (date_iso8601_ != &_default_date_iso8601_) {
    date_iso8601_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& MealIdentifier::date_iso8601() const {
  return *date_iso8601_;
}
inline void MealIdentifier::set_date_iso8601(const ::std::string& value) {
  _set_bit(1);
  if (date_iso8601_ == &_default_date_iso8601_) {
    date_iso8601_ = new ::std::string;
  }
  date_iso8601_->assign(value);
}
inline void MealIdentifier::set_date_iso8601(const char* value) {
  _set_bit(1);
  if (date_iso8601_ == &_default_date_iso8601_) {
    date_iso8601_ = new ::std::string;
  }
  date_iso8601_->assign(value);
}
inline void MealIdentifier::set_date_iso8601(const char* value, size_t size) {
  _set_bit(1);
  if (date_iso8601_ == &_default_date_iso8601_) {
    date_iso8601_ = new ::std::string;
  }
  date_iso8601_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MealIdentifier::mutable_date_iso8601() {
  _set_bit(1);
  if (date_iso8601_ == &_default_date_iso8601_) {
    date_iso8601_ = new ::std::string;
  }
  return date_iso8601_;
}

// optional int32 mealId = 3;
inline bool MealIdentifier::has_mealid() const {
  return _has_bit(2);
}
inline void MealIdentifier::clear_mealid() {
  mealid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 MealIdentifier::mealid() const {
  return mealid_;
}
inline void MealIdentifier::set_mealid(::google::protobuf::int32 value) {
  _set_bit(2);
  mealid_ = value;
}

// -------------------------------------------------------------------

// MealData

// required int32 userId = 1;
inline bool MealData::has_userid() const {
  return _has_bit(0);
}
inline void MealData::clear_userid() {
  userid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 MealData::userid() const {
  return userid_;
}
inline void MealData::set_userid(::google::protobuf::int32 value) {
  _set_bit(0);
  userid_ = value;
}

// optional string date_ISO8601 = 2;
inline bool MealData::has_date_iso8601() const {
  return _has_bit(1);
}
inline void MealData::clear_date_iso8601() {
  if (date_iso8601_ != &_default_date_iso8601_) {
    date_iso8601_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& MealData::date_iso8601() const {
  return *date_iso8601_;
}
inline void MealData::set_date_iso8601(const ::std::string& value) {
  _set_bit(1);
  if (date_iso8601_ == &_default_date_iso8601_) {
    date_iso8601_ = new ::std::string;
  }
  date_iso8601_->assign(value);
}
inline void MealData::set_date_iso8601(const char* value) {
  _set_bit(1);
  if (date_iso8601_ == &_default_date_iso8601_) {
    date_iso8601_ = new ::std::string;
  }
  date_iso8601_->assign(value);
}
inline void MealData::set_date_iso8601(const char* value, size_t size) {
  _set_bit(1);
  if (date_iso8601_ == &_default_date_iso8601_) {
    date_iso8601_ = new ::std::string;
  }
  date_iso8601_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MealData::mutable_date_iso8601() {
  _set_bit(1);
  if (date_iso8601_ == &_default_date_iso8601_) {
    date_iso8601_ = new ::std::string;
  }
  return date_iso8601_;
}

// optional int32 mealId = 3;
inline bool MealData::has_mealid() const {
  return _has_bit(2);
}
inline void MealData::clear_mealid() {
  mealid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 MealData::mealid() const {
  return mealid_;
}
inline void MealData::set_mealid(::google::protobuf::int32 value) {
  _set_bit(2);
  mealid_ = value;
}

// optional string name = 4;
inline bool MealData::has_name() const {
  return _has_bit(3);
}
inline void MealData::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& MealData::name() const {
  return *name_;
}
inline void MealData::set_name(const ::std::string& value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MealData::set_name(const char* value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MealData::set_name(const char* value, size_t size) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MealData::mutable_name() {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 creatorId = 5;
inline bool MealData::has_creatorid() const {
  return _has_bit(4);
}
inline void MealData::clear_creatorid() {
  creatorid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 MealData::creatorid() const {
  return creatorid_;
}
inline void MealData::set_creatorid(::google::protobuf::int32 value) {
  _set_bit(4);
  creatorid_ = value;
}

// repeated .FoodComponentData components = 6;
inline int MealData::components_size() const {
  return components_.size();
}
inline void MealData::clear_components() {
  components_.Clear();
}
inline const ::FoodComponentData& MealData::components(int index) const {
  return components_.Get(index);
}
inline ::FoodComponentData* MealData::mutable_components(int index) {
  return components_.Mutable(index);
}
inline ::FoodComponentData* MealData::add_components() {
  return components_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FoodComponentData >&
MealData::components() const {
  return components_;
}
inline ::google::protobuf::RepeatedPtrField< ::FoodComponentData >*
MealData::mutable_components() {
  return &components_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_libnutrition_2fproto_2fdata_2fmeal_2eproto__INCLUDED
