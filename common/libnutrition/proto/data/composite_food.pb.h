// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libnutrition/proto/data/composite_food.proto

#ifndef PROTOBUF_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto__INCLUDED
#define PROTOBUF_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "libnutrition/proto/data/food_component.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto();
void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto();
void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto();

class CompositeFoodData;

// ===================================================================

class CompositeFoodData : public ::google::protobuf::Message {
 public:
  CompositeFoodData();
  virtual ~CompositeFoodData();
  
  CompositeFoodData(const CompositeFoodData& from);
  
  inline CompositeFoodData& operator=(const CompositeFoodData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompositeFoodData& default_instance();
  
  void Swap(CompositeFoodData* other);
  
  // implements Message ----------------------------------------------
  
  CompositeFoodData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompositeFoodData& from);
  void MergeFrom(const CompositeFoodData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 ownerId = 3;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwnerIdFieldNumber = 3;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);
  
  // optional double weightAmount = 4;
  inline bool has_weightamount() const;
  inline void clear_weightamount();
  static const int kWeightAmountFieldNumber = 4;
  inline double weightamount() const;
  inline void set_weightamount(double value);
  
  // optional double volumeAmount = 5;
  inline bool has_volumeamount() const;
  inline void clear_volumeamount();
  static const int kVolumeAmountFieldNumber = 5;
  inline double volumeamount() const;
  inline void set_volumeamount(double value);
  
  // optional double quantityAmount = 6;
  inline bool has_quantityamount() const;
  inline void clear_quantityamount();
  static const int kQuantityAmountFieldNumber = 6;
  inline double quantityamount() const;
  inline void set_quantityamount(double value);
  
  // optional double servingAmount = 7;
  inline bool has_servingamount() const;
  inline void clear_servingamount();
  static const int kServingAmountFieldNumber = 7;
  inline double servingamount() const;
  inline void set_servingamount(double value);
  
  // optional string creationDate_ISO8601 = 8;
  inline bool has_creationdate_iso8601() const;
  inline void clear_creationdate_iso8601();
  static const int kCreationDateISO8601FieldNumber = 8;
  inline const ::std::string& creationdate_iso8601() const;
  inline void set_creationdate_iso8601(const ::std::string& value);
  inline void set_creationdate_iso8601(const char* value);
  inline void set_creationdate_iso8601(const char* value, size_t size);
  inline ::std::string* mutable_creationdate_iso8601();
  
  // optional string expiryDate_ISO8601 = 9;
  inline bool has_expirydate_iso8601() const;
  inline void clear_expirydate_iso8601();
  static const int kExpiryDateISO8601FieldNumber = 9;
  inline const ::std::string& expirydate_iso8601() const;
  inline void set_expirydate_iso8601(const ::std::string& value);
  inline void set_expirydate_iso8601(const char* value);
  inline void set_expirydate_iso8601(const char* value, size_t size);
  inline ::std::string* mutable_expirydate_iso8601();
  
  // optional bool isNonce = 10 [default = false];
  inline bool has_isnonce() const;
  inline void clear_isnonce();
  static const int kIsNonceFieldNumber = 10;
  inline bool isnonce() const;
  inline void set_isnonce(bool value);
  
  // repeated .FoodComponentData components = 11;
  inline int components_size() const;
  inline void clear_components();
  static const int kComponentsFieldNumber = 11;
  inline const ::FoodComponentData& components(int index) const;
  inline ::FoodComponentData* mutable_components(int index);
  inline ::FoodComponentData* add_components();
  inline const ::google::protobuf::RepeatedPtrField< ::FoodComponentData >&
      components() const;
  inline ::google::protobuf::RepeatedPtrField< ::FoodComponentData >*
      mutable_components();
  
  // @@protoc_insertion_point(class_scope:CompositeFoodData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 ownerid_;
  double weightamount_;
  double volumeamount_;
  double quantityamount_;
  double servingamount_;
  ::std::string* creationdate_iso8601_;
  static const ::std::string _default_creationdate_iso8601_;
  ::std::string* expirydate_iso8601_;
  static const ::std::string _default_expirydate_iso8601_;
  bool isnonce_;
  ::google::protobuf::RepeatedPtrField< ::FoodComponentData > components_;
  friend void  protobuf_AddDesc_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto();
  friend void protobuf_AssignDesc_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto();
  friend void protobuf_ShutdownFile_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CompositeFoodData* default_instance_;
};
// ===================================================================


// ===================================================================

// CompositeFoodData

// required int32 id = 1;
inline bool CompositeFoodData::has_id() const {
  return _has_bit(0);
}
inline void CompositeFoodData::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CompositeFoodData::id() const {
  return id_;
}
inline void CompositeFoodData::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// optional string name = 2;
inline bool CompositeFoodData::has_name() const {
  return _has_bit(1);
}
inline void CompositeFoodData::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CompositeFoodData::name() const {
  return *name_;
}
inline void CompositeFoodData::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CompositeFoodData::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CompositeFoodData::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CompositeFoodData::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 ownerId = 3;
inline bool CompositeFoodData::has_ownerid() const {
  return _has_bit(2);
}
inline void CompositeFoodData::clear_ownerid() {
  ownerid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 CompositeFoodData::ownerid() const {
  return ownerid_;
}
inline void CompositeFoodData::set_ownerid(::google::protobuf::int32 value) {
  _set_bit(2);
  ownerid_ = value;
}

// optional double weightAmount = 4;
inline bool CompositeFoodData::has_weightamount() const {
  return _has_bit(3);
}
inline void CompositeFoodData::clear_weightamount() {
  weightamount_ = 0;
  _clear_bit(3);
}
inline double CompositeFoodData::weightamount() const {
  return weightamount_;
}
inline void CompositeFoodData::set_weightamount(double value) {
  _set_bit(3);
  weightamount_ = value;
}

// optional double volumeAmount = 5;
inline bool CompositeFoodData::has_volumeamount() const {
  return _has_bit(4);
}
inline void CompositeFoodData::clear_volumeamount() {
  volumeamount_ = 0;
  _clear_bit(4);
}
inline double CompositeFoodData::volumeamount() const {
  return volumeamount_;
}
inline void CompositeFoodData::set_volumeamount(double value) {
  _set_bit(4);
  volumeamount_ = value;
}

// optional double quantityAmount = 6;
inline bool CompositeFoodData::has_quantityamount() const {
  return _has_bit(5);
}
inline void CompositeFoodData::clear_quantityamount() {
  quantityamount_ = 0;
  _clear_bit(5);
}
inline double CompositeFoodData::quantityamount() const {
  return quantityamount_;
}
inline void CompositeFoodData::set_quantityamount(double value) {
  _set_bit(5);
  quantityamount_ = value;
}

// optional double servingAmount = 7;
inline bool CompositeFoodData::has_servingamount() const {
  return _has_bit(6);
}
inline void CompositeFoodData::clear_servingamount() {
  servingamount_ = 0;
  _clear_bit(6);
}
inline double CompositeFoodData::servingamount() const {
  return servingamount_;
}
inline void CompositeFoodData::set_servingamount(double value) {
  _set_bit(6);
  servingamount_ = value;
}

// optional string creationDate_ISO8601 = 8;
inline bool CompositeFoodData::has_creationdate_iso8601() const {
  return _has_bit(7);
}
inline void CompositeFoodData::clear_creationdate_iso8601() {
  if (creationdate_iso8601_ != &_default_creationdate_iso8601_) {
    creationdate_iso8601_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& CompositeFoodData::creationdate_iso8601() const {
  return *creationdate_iso8601_;
}
inline void CompositeFoodData::set_creationdate_iso8601(const ::std::string& value) {
  _set_bit(7);
  if (creationdate_iso8601_ == &_default_creationdate_iso8601_) {
    creationdate_iso8601_ = new ::std::string;
  }
  creationdate_iso8601_->assign(value);
}
inline void CompositeFoodData::set_creationdate_iso8601(const char* value) {
  _set_bit(7);
  if (creationdate_iso8601_ == &_default_creationdate_iso8601_) {
    creationdate_iso8601_ = new ::std::string;
  }
  creationdate_iso8601_->assign(value);
}
inline void CompositeFoodData::set_creationdate_iso8601(const char* value, size_t size) {
  _set_bit(7);
  if (creationdate_iso8601_ == &_default_creationdate_iso8601_) {
    creationdate_iso8601_ = new ::std::string;
  }
  creationdate_iso8601_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CompositeFoodData::mutable_creationdate_iso8601() {
  _set_bit(7);
  if (creationdate_iso8601_ == &_default_creationdate_iso8601_) {
    creationdate_iso8601_ = new ::std::string;
  }
  return creationdate_iso8601_;
}

// optional string expiryDate_ISO8601 = 9;
inline bool CompositeFoodData::has_expirydate_iso8601() const {
  return _has_bit(8);
}
inline void CompositeFoodData::clear_expirydate_iso8601() {
  if (expirydate_iso8601_ != &_default_expirydate_iso8601_) {
    expirydate_iso8601_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& CompositeFoodData::expirydate_iso8601() const {
  return *expirydate_iso8601_;
}
inline void CompositeFoodData::set_expirydate_iso8601(const ::std::string& value) {
  _set_bit(8);
  if (expirydate_iso8601_ == &_default_expirydate_iso8601_) {
    expirydate_iso8601_ = new ::std::string;
  }
  expirydate_iso8601_->assign(value);
}
inline void CompositeFoodData::set_expirydate_iso8601(const char* value) {
  _set_bit(8);
  if (expirydate_iso8601_ == &_default_expirydate_iso8601_) {
    expirydate_iso8601_ = new ::std::string;
  }
  expirydate_iso8601_->assign(value);
}
inline void CompositeFoodData::set_expirydate_iso8601(const char* value, size_t size) {
  _set_bit(8);
  if (expirydate_iso8601_ == &_default_expirydate_iso8601_) {
    expirydate_iso8601_ = new ::std::string;
  }
  expirydate_iso8601_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CompositeFoodData::mutable_expirydate_iso8601() {
  _set_bit(8);
  if (expirydate_iso8601_ == &_default_expirydate_iso8601_) {
    expirydate_iso8601_ = new ::std::string;
  }
  return expirydate_iso8601_;
}

// optional bool isNonce = 10 [default = false];
inline bool CompositeFoodData::has_isnonce() const {
  return _has_bit(9);
}
inline void CompositeFoodData::clear_isnonce() {
  isnonce_ = false;
  _clear_bit(9);
}
inline bool CompositeFoodData::isnonce() const {
  return isnonce_;
}
inline void CompositeFoodData::set_isnonce(bool value) {
  _set_bit(9);
  isnonce_ = value;
}

// repeated .FoodComponentData components = 11;
inline int CompositeFoodData::components_size() const {
  return components_.size();
}
inline void CompositeFoodData::clear_components() {
  components_.Clear();
}
inline const ::FoodComponentData& CompositeFoodData::components(int index) const {
  return components_.Get(index);
}
inline ::FoodComponentData* CompositeFoodData::mutable_components(int index) {
  return components_.Mutable(index);
}
inline ::FoodComponentData* CompositeFoodData::add_components() {
  return components_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FoodComponentData >&
CompositeFoodData::components() const {
  return components_;
}
inline ::google::protobuf::RepeatedPtrField< ::FoodComponentData >*
CompositeFoodData::mutable_components() {
  return &components_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_libnutrition_2fproto_2fdata_2fcomposite_5ffood_2eproto__INCLUDED
